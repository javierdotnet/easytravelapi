/**
 * EasyTravelApi
 * API for travel agents
 *
 * OpenAPI spec version: 0.1.9
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/BookActivityRQ', 'model/BookActivityRS', 'model/BookHotelRQ', 'model/BookHotelRS', 'model/BookTransferRQ', 'model/BookTransferRS', 'model/CancelBookingRS', 'model/ConfirmServicesRQ', 'model/ConfirmServicesRS', 'model/GetActivityPriceDetailsRS', 'model/GetAvailableActivitiesRS', 'model/GetAvailableHotelsRS', 'model/GetAvailableTransfersRS', 'model/GetBookingsRS', 'model/GetDataSheetRS', 'model/GetGrantedHotelsRS', 'model/GetHotelPriceDetailsRS', 'model/GetPortfolioRS', 'model/GetRoomingListRS', 'model/GetTransferPriceDetailsRS', 'model/UpdateRQ', 'model/UpdateRS'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/BookActivityRQ'), require('../model/BookActivityRS'), require('../model/BookHotelRQ'), require('../model/BookHotelRS'), require('../model/BookTransferRQ'), require('../model/BookTransferRS'), require('../model/CancelBookingRS'), require('../model/ConfirmServicesRQ'), require('../model/ConfirmServicesRS'), require('../model/GetActivityPriceDetailsRS'), require('../model/GetAvailableActivitiesRS'), require('../model/GetAvailableHotelsRS'), require('../model/GetAvailableTransfersRS'), require('../model/GetBookingsRS'), require('../model/GetDataSheetRS'), require('../model/GetGrantedHotelsRS'), require('../model/GetHotelPriceDetailsRS'), require('../model/GetPortfolioRS'), require('../model/GetRoomingListRS'), require('../model/GetTransferPriceDetailsRS'), require('../model/UpdateRQ'), require('../model/UpdateRS'));
  } else {
    // Browser globals (root is window)
    if (!root.EasyTravelApi) {
      root.EasyTravelApi = {};
    }
    root.EasyTravelApi.DefaultApi = factory(root.EasyTravelApi.ApiClient, root.EasyTravelApi.BookActivityRQ, root.EasyTravelApi.BookActivityRS, root.EasyTravelApi.BookHotelRQ, root.EasyTravelApi.BookHotelRS, root.EasyTravelApi.BookTransferRQ, root.EasyTravelApi.BookTransferRS, root.EasyTravelApi.CancelBookingRS, root.EasyTravelApi.ConfirmServicesRQ, root.EasyTravelApi.ConfirmServicesRS, root.EasyTravelApi.GetActivityPriceDetailsRS, root.EasyTravelApi.GetAvailableActivitiesRS, root.EasyTravelApi.GetAvailableHotelsRS, root.EasyTravelApi.GetAvailableTransfersRS, root.EasyTravelApi.GetBookingsRS, root.EasyTravelApi.GetDataSheetRS, root.EasyTravelApi.GetGrantedHotelsRS, root.EasyTravelApi.GetHotelPriceDetailsRS, root.EasyTravelApi.GetPortfolioRS, root.EasyTravelApi.GetRoomingListRS, root.EasyTravelApi.GetTransferPriceDetailsRS, root.EasyTravelApi.UpdateRQ, root.EasyTravelApi.UpdateRS);
  }
}(this, function(ApiClient, BookActivityRQ, BookActivityRS, BookHotelRQ, BookHotelRS, BookTransferRQ, BookTransferRS, CancelBookingRS, ConfirmServicesRQ, ConfirmServicesRS, GetActivityPriceDetailsRS, GetAvailableActivitiesRS, GetAvailableHotelsRS, GetAvailableTransfersRS, GetBookingsRS, GetDataSheetRS, GetGrantedHotelsRS, GetHotelPriceDetailsRS, GetPortfolioRS, GetRoomingListRS, GetTransferPriceDetailsRS, UpdateRQ, UpdateRS) {
  'use strict';

  /**
   * Default service.
   * @module api/DefaultApi
   * @version 0.1.9
   */

  /**
   * Constructs a new DefaultApi. 
   * @alias module:api/DefaultApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the bookActivity operation.
     * @callback module:api/DefaultApi~bookActivityCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BookActivityRS} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Book an activity
     * Here you can confirm an activity booking. You must provide a price key and some additional data (lead name, comments, ...)
     * @param {String} authtoken Auth token provided by your partner, and possibly renewed by using the /commons/newtoken method
     * @param {Object} opts Optional parameters
     * @param {module:model/BookActivityRQ} opts.body 
     * @param {module:api/DefaultApi~bookActivityCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BookActivityRS}
     */
    this.bookActivity = function(authtoken, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'authtoken' is set
      if (authtoken == undefined || authtoken == null) {
        throw new Error("Missing the required parameter 'authtoken' when calling bookActivity");
      }


      var pathParams = {
        'authtoken': authtoken
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = BookActivityRS;

      return this.apiClient.callApi(
        '/{authtoken}/activity/booking', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the bookHotel operation.
     * @callback module:api/DefaultApi~bookHotelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BookHotelRS} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Use this method to confirm a hotel service
     * 
     * @param {String} authtoken Auth token provided by your partner, and possibly renewed by using the /commons/newtoken method
     * @param {Object} opts Optional parameters
     * @param {module:model/BookHotelRQ} opts.body 
     * @param {module:api/DefaultApi~bookHotelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BookHotelRS}
     */
    this.bookHotel = function(authtoken, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'authtoken' is set
      if (authtoken == undefined || authtoken == null) {
        throw new Error("Missing the required parameter 'authtoken' when calling bookHotel");
      }


      var pathParams = {
        'authtoken': authtoken
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = BookHotelRS;

      return this.apiClient.callApi(
        '/{authtoken}/hotel/booking', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the bookTransfer operation.
     * @callback module:api/DefaultApi~bookTransferCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BookTransferRS} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Use this method to confirm a transfer service booking
     * 
     * @param {String} authtoken Auth token provided by your partner, and possibly renewed by using the /commons/newtoken method
     * @param {Object} opts Optional parameters
     * @param {module:model/BookTransferRQ} opts.body 
     * @param {module:api/DefaultApi~bookTransferCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BookTransferRS}
     */
    this.bookTransfer = function(authtoken, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'authtoken' is set
      if (authtoken == undefined || authtoken == null) {
        throw new Error("Missing the required parameter 'authtoken' when calling bookTransfer");
      }


      var pathParams = {
        'authtoken': authtoken
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = BookTransferRS;

      return this.apiClient.callApi(
        '/{authtoken}/transfer/booking', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the cancelBooking operation.
     * @callback module:api/DefaultApi~cancelBookingCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CancelBookingRS} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Method to cancel a service booking
     * 
     * @param {String} authtoken Auth token provided by your partner, and possibly renewed by using the /commons/newtoken method
     * @param {String} bookingid The service booking id you want to cancel
     * @param {module:api/DefaultApi~cancelBookingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CancelBookingRS}
     */
    this.cancelBooking = function(authtoken, bookingid, callback) {
      var postBody = null;

      // verify the required parameter 'authtoken' is set
      if (authtoken == undefined || authtoken == null) {
        throw new Error("Missing the required parameter 'authtoken' when calling cancelBooking");
      }

      // verify the required parameter 'bookingid' is set
      if (bookingid == undefined || bookingid == null) {
        throw new Error("Missing the required parameter 'bookingid' when calling cancelBooking");
      }


      var pathParams = {
        'authtoken': authtoken,
        'bookingid': bookingid
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CancelBookingRS;

      return this.apiClient.callApi(
        '/{authtoken}/commons/booking/{bookingid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the confirmServices operation.
     * @callback module:api/DefaultApi~confirmServicesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConfirmServicesRS} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Use this method to confirm or reject services
     * 
     * @param {String} authtoken Auth token provided by your partner, and possibly renewed by using the /commons/newtoken method
     * @param {Object} opts Optional parameters
     * @param {module:model/ConfirmServicesRQ} opts.body 
     * @param {module:api/DefaultApi~confirmServicesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConfirmServicesRS}
     */
    this.confirmServices = function(authtoken, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'authtoken' is set
      if (authtoken == undefined || authtoken == null) {
        throw new Error("Missing the required parameter 'authtoken' when calling confirmServices");
      }


      var pathParams = {
        'authtoken': authtoken
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ConfirmServicesRS;

      return this.apiClient.callApi(
        '/{authtoken}/channel/confirm', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getActivityPriceDetails operation.
     * @callback module:api/DefaultApi~getActivityPriceDetailsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetActivityPriceDetailsRS} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get extra info
     * By passing a price key you get extra info
     * @param {String} authtoken Auth token provided by your partner, and possibly renewed by using the /commons/newtoken method
     * @param {String} key The activity price key, as provided in the /activity/available step
     * @param {module:api/DefaultApi~getActivityPriceDetailsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetActivityPriceDetailsRS}
     */
    this.getActivityPriceDetails = function(authtoken, key, callback) {
      var postBody = null;

      // verify the required parameter 'authtoken' is set
      if (authtoken == undefined || authtoken == null) {
        throw new Error("Missing the required parameter 'authtoken' when calling getActivityPriceDetails");
      }

      // verify the required parameter 'key' is set
      if (key == undefined || key == null) {
        throw new Error("Missing the required parameter 'key' when calling getActivityPriceDetails");
      }


      var pathParams = {
        'authtoken': authtoken,
        'key': key
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GetActivityPriceDetailsRS;

      return this.apiClient.callApi(
        '/{authtoken}/activity/pricedetails/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAvailabeTransfers operation.
     * @callback module:api/DefaultApi~getAvailabeTransfersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetAvailableTransfersRS} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Use this method to know which transfers are available and their prices
     * 
     * @param {String} authtoken Auth token provided by your partner, and possibly renewed by using the /commons/newtoken method
     * @param {Object} opts Optional parameters
     * @param {String} opts.from Transfer origin, as got in the getportfolio response
     * @param {String} opts.to Transfer destination, as got in the getportfolio response
     * @param {Number} opts.pax Number of pax
     * @param {Array.<Number>} opts.ages Pax ages. If not present we will assume they are adults
     * @param {Number} opts.bikes Number of bikes
     * @param {Number} opts.golfs Number of golf baggages
     * @param {Number} opts.bigs Number of big luggages not bikes neither golf baggages
     * @param {Number} opts.wheelchairs Number of wheel chairs
     * @param {Number} opts.incomingdate Locale date for the incoming side of the transfer, in YYYYMMDD format
     * @param {Number} opts.outgoingdate Locale date for the outgoing / return side of the transfer, in YYYYMMDD format
     * @param {module:api/DefaultApi~getAvailabeTransfersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetAvailableTransfersRS}
     */
    this.getAvailabeTransfers = function(authtoken, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'authtoken' is set
      if (authtoken == undefined || authtoken == null) {
        throw new Error("Missing the required parameter 'authtoken' when calling getAvailabeTransfers");
      }


      var pathParams = {
        'authtoken': authtoken
      };
      var queryParams = {
        'from': opts['from'],
        'to': opts['to'],
        'pax': opts['pax'],
        'ages': this.apiClient.buildCollectionParam(opts['ages'], 'multi'),
        'bikes': opts['bikes'],
        'golfs': opts['golfs'],
        'bigs': opts['bigs'],
        'wheelchairs': opts['wheelchairs'],
        'incomingdate': opts['incomingdate'],
        'outgoingdate': opts['outgoingdate']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GetAvailableTransfersRS;

      return this.apiClient.callApi(
        '/{authtoken}/transfer/available', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAvailableActivities operation.
     * @callback module:api/DefaultApi~getAvailableActivitiesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetAvailableActivitiesRS} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get available activities
     * By passing a resort and holidays dates you get a list of the available activities
     * @param {String} authtoken Auth token provided by your partner, and possibly renewed by using the /commons/newtoken method
     * @param {Object} opts Optional parameters
     * @param {Number} opts.start Holidays start date in YYYYMMDD format
     * @param {Number} opts.end Holidays end date in YYYYMMDD format
     * @param {String} opts.resourceid Resort ID. You can get it from commons/getportfolio
     * @param {Number} opts.pax Number of pax
     * @param {Array.<Number>} opts.ages Ages for the paxes. You can include just children ages. If not present all pax will be treated as adults
     * @param {module:api/DefaultApi~getAvailableActivitiesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetAvailableActivitiesRS}
     */
    this.getAvailableActivities = function(authtoken, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'authtoken' is set
      if (authtoken == undefined || authtoken == null) {
        throw new Error("Missing the required parameter 'authtoken' when calling getAvailableActivities");
      }


      var pathParams = {
        'authtoken': authtoken
      };
      var queryParams = {
        'start': opts['start'],
        'end': opts['end'],
        'resourceid': opts['resourceid'],
        'pax': opts['pax'],
        'ages': this.apiClient.buildCollectionParam(opts['ages'], 'multi')
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GetAvailableActivitiesRS;

      return this.apiClient.callApi(
        '/{authtoken}/activity/available', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAvailableHotels operation.
     * @callback module:api/DefaultApi~getAvailableHotelsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetAvailableHotelsRS} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Use this method to know which hotels are available and their prices
     * 
     * @param {String} authtoken Auth token provided by your partner, and possibly renewed by using the /commons/newtoken method
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.resorts The list of resorts you are interested in
     * @param {Number} opts.checkin The locale checkin date in YYYYMMDD format
     * @param {Number} opts.checkout The locale checkout date in YYYYMMDD format
     * @param {Array.<String>} opts.occupancies List of occupancies you need
     * @param {Boolean} opts.includestaticinfo Set to true if you want the response to include static info (hotel description, main hotel image, ...). If false (default value) static info will not be included in order to make the response lighter
     * @param {module:api/DefaultApi~getAvailableHotelsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetAvailableHotelsRS}
     */
    this.getAvailableHotels = function(authtoken, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'authtoken' is set
      if (authtoken == undefined || authtoken == null) {
        throw new Error("Missing the required parameter 'authtoken' when calling getAvailableHotels");
      }


      var pathParams = {
        'authtoken': authtoken
      };
      var queryParams = {
        'resorts': this.apiClient.buildCollectionParam(opts['resorts'], 'multi'),
        'checkin': opts['checkin'],
        'checkout': opts['checkout'],
        'occupancies': this.apiClient.buildCollectionParam(opts['occupancies'], 'multi'),
        'includestaticinfo': opts['includestaticinfo']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GetAvailableHotelsRS;

      return this.apiClient.callApi(
        '/{authtoken}/hotel/available', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getBookings operation.
     * @callback module:api/DefaultApi~getBookingsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetBookingsRS} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Method to get a list of bookings
     * 
     * @param {String} authtoken Auth token provided by your partner, and possibly renewed by using the /commons/newtoken method
     * @param {Object} opts Optional parameters
     * @param {Number} opts.confirmedfrom Starting date you want service bookings confirmed from. In YYYYMMDD format
     * @param {Number} opts.confirmedto Ending date you want service bookings confirmed to. In YYYYMMDD format
     * @param {Number} opts.startingfrom Starting date you want service bookings starting from. In YYYYMMDD format
     * @param {Number} opts.startingto Ending date you want service bookings starting from. In YYYYMMDD format
     * @param {module:api/DefaultApi~getBookingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetBookingsRS}
     */
    this.getBookings = function(authtoken, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'authtoken' is set
      if (authtoken == undefined || authtoken == null) {
        throw new Error("Missing the required parameter 'authtoken' when calling getBookings");
      }


      var pathParams = {
        'authtoken': authtoken
      };
      var queryParams = {
        'confirmedfrom': opts['confirmedfrom'],
        'confirmedto': opts['confirmedto'],
        'startingfrom': opts['startingfrom'],
        'startingto': opts['startingto']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GetBookingsRS;

      return this.apiClient.callApi(
        '/{authtoken}/commons/bookings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getDataSheet operation.
     * @callback module:api/DefaultApi~getDataSheetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetDataSheetRS} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Method to get a resource data sheet. E.g. descriptions, images, features
     * 
     * @param {String} authtoken Auth token provided by your partner, and possibly renewed by using the /commons/newtoken method
     * @param {String} resourceid 
     * @param {module:api/DefaultApi~getDataSheetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetDataSheetRS}
     */
    this.getDataSheet = function(authtoken, resourceid, callback) {
      var postBody = null;

      // verify the required parameter 'authtoken' is set
      if (authtoken == undefined || authtoken == null) {
        throw new Error("Missing the required parameter 'authtoken' when calling getDataSheet");
      }

      // verify the required parameter 'resourceid' is set
      if (resourceid == undefined || resourceid == null) {
        throw new Error("Missing the required parameter 'resourceid' when calling getDataSheet");
      }


      var pathParams = {
        'authtoken': authtoken,
        'resourceid': resourceid
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GetDataSheetRS;

      return this.apiClient.callApi(
        '/{authtoken}/commons/datasheet/{resourceid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getGrantedHotels operation.
     * @callback module:api/DefaultApi~getGrantedHotelsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetGrantedHotelsRS} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Use this method to know which hotels are you allowed to update. It provides the ids to be used by the channel manager
     * 
     * @param {String} authtoken Auth token provided by your partner, and possibly renewed by using the /commons/newtoken method
     * @param {module:api/DefaultApi~getGrantedHotelsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetGrantedHotelsRS}
     */
    this.getGrantedHotels = function(authtoken, callback) {
      var postBody = null;

      // verify the required parameter 'authtoken' is set
      if (authtoken == undefined || authtoken == null) {
        throw new Error("Missing the required parameter 'authtoken' when calling getGrantedHotels");
      }


      var pathParams = {
        'authtoken': authtoken
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GetGrantedHotelsRS;

      return this.apiClient.callApi(
        '/{authtoken}/channel/granted', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getHotelPriceDetails operation.
     * @callback module:api/DefaultApi~getHotelPriceDetailsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetHotelPriceDetailsRS} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Use this methos to guess cancellation costs and important remarks regarding a price
     * 
     * @param {String} authtoken Auth token provided by your partner, and possibly renewed by using the /commons/newtoken method
     * @param {String} key The hotel price key, as provided in the /hotel/available step
     * @param {module:api/DefaultApi~getHotelPriceDetailsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetHotelPriceDetailsRS}
     */
    this.getHotelPriceDetails = function(authtoken, key, callback) {
      var postBody = null;

      // verify the required parameter 'authtoken' is set
      if (authtoken == undefined || authtoken == null) {
        throw new Error("Missing the required parameter 'authtoken' when calling getHotelPriceDetails");
      }

      // verify the required parameter 'key' is set
      if (key == undefined || key == null) {
        throw new Error("Missing the required parameter 'key' when calling getHotelPriceDetails");
      }


      var pathParams = {
        'authtoken': authtoken,
        'key': key
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GetHotelPriceDetailsRS;

      return this.apiClient.callApi(
        '/{authtoken}/hotel/pricedetails/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getPortfolio operation.
     * @callback module:api/DefaultApi~getPortfolioCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetPortfolioRS} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Method to get the whole product tree
     * 
     * @param {String} authtoken Auth token provided by your partner, and possibly renewed by using the /commons/newtoken method
     * @param {module:api/DefaultApi~getPortfolioCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetPortfolioRS}
     */
    this.getPortfolio = function(authtoken, callback) {
      var postBody = null;

      // verify the required parameter 'authtoken' is set
      if (authtoken == undefined || authtoken == null) {
        throw new Error("Missing the required parameter 'authtoken' when calling getPortfolio");
      }


      var pathParams = {
        'authtoken': authtoken
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GetPortfolioRS;

      return this.apiClient.callApi(
        '/{authtoken}/commons/portfolio', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getRoomingList operation.
     * @callback module:api/DefaultApi~getRoomingListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetRoomingListRS} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Use this method to download the list of hotel bookings
     * 
     * @param {String} authtoken Auth token provided by your partner, and possibly renewed by using the /commons/newtoken method
     * @param {Object} opts Optional parameters
     * @param {Number} opts.confirmedfrom Starting date you want service bookings confirmed from. In YYYYMMDD format
     * @param {Number} opts.confirmedto Ending date you want service bookings confirmed to. In YYYYMMDD format
     * @param {Number} opts.startingfrom Starting date you want service bookings starting from. In YYYYMMDD format
     * @param {Number} opts.startingto Ending date you want service bookings starting from. In YYYYMMDD format
     * @param {module:api/DefaultApi~getRoomingListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetRoomingListRS}
     */
    this.getRoomingList = function(authtoken, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'authtoken' is set
      if (authtoken == undefined || authtoken == null) {
        throw new Error("Missing the required parameter 'authtoken' when calling getRoomingList");
      }


      var pathParams = {
        'authtoken': authtoken
      };
      var queryParams = {
        'confirmedfrom': opts['confirmedfrom'],
        'confirmedto': opts['confirmedto'],
        'startingfrom': opts['startingfrom'],
        'startingto': opts['startingto']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GetRoomingListRS;

      return this.apiClient.callApi(
        '/{authtoken}/channel/roominglist', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getToken operation.
     * @callback module:api/DefaultApi~getTokenCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Use this method to get or renew your authentication token
     * 
     * @param {String} authtoken Auth token provided by your partner, and possibly renewed by using the /commons/newtoken method
     * @param {Object} opts Optional parameters
     * @param {String} opts.user 
     * @param {module:api/DefaultApi~getTokenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.getToken = function(authtoken, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'authtoken' is set
      if (authtoken == undefined || authtoken == null) {
        throw new Error("Missing the required parameter 'authtoken' when calling getToken");
      }


      var pathParams = {
        'authtoken': authtoken
      };
      var queryParams = {
        'user': opts['user']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/{authtoken}/commons/newtoken', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getTransferPriceDetails operation.
     * @callback module:api/DefaultApi~getTransferPriceDetailsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetTransferPriceDetailsRS} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Use this method to guess cancellation costs and important remarks
     * 
     * @param {String} authtoken Auth token provided by your partner, and possibly renewed by using the /commons/newtoken method
     * @param {String} key The hotel price key, as provided in the /transfer/available step
     * @param {module:api/DefaultApi~getTransferPriceDetailsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetTransferPriceDetailsRS}
     */
    this.getTransferPriceDetails = function(authtoken, key, callback) {
      var postBody = null;

      // verify the required parameter 'authtoken' is set
      if (authtoken == undefined || authtoken == null) {
        throw new Error("Missing the required parameter 'authtoken' when calling getTransferPriceDetails");
      }

      // verify the required parameter 'key' is set
      if (key == undefined || key == null) {
        throw new Error("Missing the required parameter 'key' when calling getTransferPriceDetails");
      }


      var pathParams = {
        'authtoken': authtoken,
        'key': key
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GetTransferPriceDetailsRS;

      return this.apiClient.callApi(
        '/{authtoken}/transfer/pricedetails/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the update operation.
     * @callback module:api/DefaultApi~updateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateRS} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Use this method to update hotel inventory
     * 
     * @param {String} authtoken Auth token provided by your partner, and possibly renewed by using the /commons/newtoken method
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateRQ} opts.body 
     * @param {module:api/DefaultApi~updateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateRS}
     */
    this.update = function(authtoken, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'authtoken' is set
      if (authtoken == undefined || authtoken == null) {
        throw new Error("Missing the required parameter 'authtoken' when calling update");
      }


      var pathParams = {
        'authtoken': authtoken
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = UpdateRS;

      return this.apiClient.callApi(
        '/{authtoken}/channel/hotel/inventory', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
