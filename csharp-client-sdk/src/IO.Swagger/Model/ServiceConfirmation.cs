/* 
 * EasyTravelApi
 *
 * API for travel agents
 *
 * OpenAPI spec version: 0.1.9
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Service confirmation data
    /// </summary>
    [DataContract]
    public partial class ServiceConfirmation :  IEquatable<ServiceConfirmation>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ServiceConfirmation" /> class.
        /// </summary>
        /// <param name="BookingId">Service booking id, as provided by the getroominglist method.</param>
        /// <param name="Confirmed">True if this service is OK. False if this service is not accepted (default to false).</param>
        /// <param name="Comments">Comments you want to supply. E.g. the reason to reject the service request.</param>
        public ServiceConfirmation(string BookingId = null, bool? Confirmed = null, string Comments = null)
        {
            this.BookingId = BookingId;
            // use default value if no "Confirmed" provided
            if (Confirmed == null)
            {
                this.Confirmed = false;
            }
            else
            {
                this.Confirmed = Confirmed;
            }
            this.Comments = Comments;
        }
        
        /// <summary>
        /// Service booking id, as provided by the getroominglist method
        /// </summary>
        /// <value>Service booking id, as provided by the getroominglist method</value>
        [DataMember(Name="bookingId", EmitDefaultValue=false)]
        public string BookingId { get; set; }
        /// <summary>
        /// True if this service is OK. False if this service is not accepted
        /// </summary>
        /// <value>True if this service is OK. False if this service is not accepted</value>
        [DataMember(Name="confirmed", EmitDefaultValue=false)]
        public bool? Confirmed { get; set; }
        /// <summary>
        /// Comments you want to supply. E.g. the reason to reject the service request
        /// </summary>
        /// <value>Comments you want to supply. E.g. the reason to reject the service request</value>
        [DataMember(Name="comments", EmitDefaultValue=false)]
        public string Comments { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ServiceConfirmation {\n");
            sb.Append("  BookingId: ").Append(BookingId).Append("\n");
            sb.Append("  Confirmed: ").Append(Confirmed).Append("\n");
            sb.Append("  Comments: ").Append(Comments).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as ServiceConfirmation);
        }

        /// <summary>
        /// Returns true if ServiceConfirmation instances are equal
        /// </summary>
        /// <param name="other">Instance of ServiceConfirmation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ServiceConfirmation other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.BookingId == other.BookingId ||
                    this.BookingId != null &&
                    this.BookingId.Equals(other.BookingId)
                ) && 
                (
                    this.Confirmed == other.Confirmed ||
                    this.Confirmed != null &&
                    this.Confirmed.Equals(other.Confirmed)
                ) && 
                (
                    this.Comments == other.Comments ||
                    this.Comments != null &&
                    this.Comments.Equals(other.Comments)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.BookingId != null)
                    hash = hash * 59 + this.BookingId.GetHashCode();
                if (this.Confirmed != null)
                    hash = hash * 59 + this.Confirmed.GetHashCode();
                if (this.Comments != null)
                    hash = hash * 59 + this.Comments.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
