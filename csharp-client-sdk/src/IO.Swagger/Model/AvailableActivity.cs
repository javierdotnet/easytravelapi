/* 
 * EasyTravelApi
 *
 * API for travel agents
 *
 * OpenAPI spec version: 0.1.9
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace IO.Swagger.Model
{
    /// <summary>
    /// An available activity
    /// </summary>
    [DataContract]
    public partial class AvailableActivity :  IEquatable<AvailableActivity>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AvailableActivity" /> class.
        /// </summary>
        /// <param name="ActivityId">This activity ID.</param>
        /// <param name="Name">The name of this activity. Usually multi-language.</param>
        /// <param name="Description">The description of this activity. Usually multi-language.</param>
        /// <param name="Image">The main image for this activity.</param>
        /// <param name="AvailableDates">List of available dates (and hours) for this activity. Here you will find prices.</param>
        public AvailableActivity(string ActivityId = null, string Name = null, string Description = null, string Image = null, List<HolderForAnActivityDate> AvailableDates = null)
        {
            this.ActivityId = ActivityId;
            this.Name = Name;
            this.Description = Description;
            this.Image = Image;
            this.AvailableDates = AvailableDates;
        }
        
        /// <summary>
        /// This activity ID
        /// </summary>
        /// <value>This activity ID</value>
        [DataMember(Name="activityId", EmitDefaultValue=false)]
        public string ActivityId { get; set; }
        /// <summary>
        /// The name of this activity. Usually multi-language
        /// </summary>
        /// <value>The name of this activity. Usually multi-language</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }
        /// <summary>
        /// The description of this activity. Usually multi-language
        /// </summary>
        /// <value>The description of this activity. Usually multi-language</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }
        /// <summary>
        /// The main image for this activity
        /// </summary>
        /// <value>The main image for this activity</value>
        [DataMember(Name="image", EmitDefaultValue=false)]
        public string Image { get; set; }
        /// <summary>
        /// List of available dates (and hours) for this activity. Here you will find prices
        /// </summary>
        /// <value>List of available dates (and hours) for this activity. Here you will find prices</value>
        [DataMember(Name="availableDates", EmitDefaultValue=false)]
        public List<HolderForAnActivityDate> AvailableDates { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AvailableActivity {\n");
            sb.Append("  ActivityId: ").Append(ActivityId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Image: ").Append(Image).Append("\n");
            sb.Append("  AvailableDates: ").Append(AvailableDates).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as AvailableActivity);
        }

        /// <summary>
        /// Returns true if AvailableActivity instances are equal
        /// </summary>
        /// <param name="other">Instance of AvailableActivity to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AvailableActivity other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.ActivityId == other.ActivityId ||
                    this.ActivityId != null &&
                    this.ActivityId.Equals(other.ActivityId)
                ) && 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.Description == other.Description ||
                    this.Description != null &&
                    this.Description.Equals(other.Description)
                ) && 
                (
                    this.Image == other.Image ||
                    this.Image != null &&
                    this.Image.Equals(other.Image)
                ) && 
                (
                    this.AvailableDates == other.AvailableDates ||
                    this.AvailableDates != null &&
                    this.AvailableDates.SequenceEqual(other.AvailableDates)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.ActivityId != null)
                    hash = hash * 59 + this.ActivityId.GetHashCode();
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.Description != null)
                    hash = hash * 59 + this.Description.GetHashCode();
                if (this.Image != null)
                    hash = hash * 59 + this.Image.GetHashCode();
                if (this.AvailableDates != null)
                    hash = hash * 59 + this.AvailableDates.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
