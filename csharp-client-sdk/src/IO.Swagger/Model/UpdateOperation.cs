/* 
 * EasyTravelApi
 *
 * API for travel agents
 *
 * OpenAPI spec version: 0.1.9
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Describes an update operation, like modifying allotment, prices or stop sales
    /// </summary>
    [DataContract]
    public partial class UpdateOperation :  IEquatable<UpdateOperation>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateOperation" /> class.
        /// </summary>
        /// <param name="HotelId">Hotel id you got when you called the getgrantedhotels method.</param>
        /// <param name="RoomId">Room id you got when you called the getgrantedhotels method.</param>
        /// <param name="Action">Action you want to perform. E.g. STOPSALES, OPENSALES, SETPRICE, SETALLOTMENT, ....</param>
        /// <param name="StartDate">Locale date this data starts appliance. In format YYYMMDD.</param>
        /// <param name="EndDate">Locale date this data ends appliance. In format YYYMMDD.</param>
        /// <param name="NewValue">New value to be set.</param>
        public UpdateOperation(string HotelId = null, string RoomId = null, string Action = null, int? StartDate = null, int? EndDate = null, string NewValue = null)
        {
            this.HotelId = HotelId;
            this.RoomId = RoomId;
            this.Action = Action;
            this.StartDate = StartDate;
            this.EndDate = EndDate;
            this.NewValue = NewValue;
        }
        
        /// <summary>
        /// Hotel id you got when you called the getgrantedhotels method
        /// </summary>
        /// <value>Hotel id you got when you called the getgrantedhotels method</value>
        [DataMember(Name="hotelId", EmitDefaultValue=false)]
        public string HotelId { get; set; }
        /// <summary>
        /// Room id you got when you called the getgrantedhotels method
        /// </summary>
        /// <value>Room id you got when you called the getgrantedhotels method</value>
        [DataMember(Name="roomId", EmitDefaultValue=false)]
        public string RoomId { get; set; }
        /// <summary>
        /// Action you want to perform. E.g. STOPSALES, OPENSALES, SETPRICE, SETALLOTMENT, ...
        /// </summary>
        /// <value>Action you want to perform. E.g. STOPSALES, OPENSALES, SETPRICE, SETALLOTMENT, ...</value>
        [DataMember(Name="action", EmitDefaultValue=false)]
        public string Action { get; set; }
        /// <summary>
        /// Locale date this data starts appliance. In format YYYMMDD
        /// </summary>
        /// <value>Locale date this data starts appliance. In format YYYMMDD</value>
        [DataMember(Name="startDate", EmitDefaultValue=false)]
        public int? StartDate { get; set; }
        /// <summary>
        /// Locale date this data ends appliance. In format YYYMMDD
        /// </summary>
        /// <value>Locale date this data ends appliance. In format YYYMMDD</value>
        [DataMember(Name="endDate", EmitDefaultValue=false)]
        public int? EndDate { get; set; }
        /// <summary>
        /// New value to be set
        /// </summary>
        /// <value>New value to be set</value>
        [DataMember(Name="newValue", EmitDefaultValue=false)]
        public string NewValue { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UpdateOperation {\n");
            sb.Append("  HotelId: ").Append(HotelId).Append("\n");
            sb.Append("  RoomId: ").Append(RoomId).Append("\n");
            sb.Append("  Action: ").Append(Action).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("  NewValue: ").Append(NewValue).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as UpdateOperation);
        }

        /// <summary>
        /// Returns true if UpdateOperation instances are equal
        /// </summary>
        /// <param name="other">Instance of UpdateOperation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UpdateOperation other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.HotelId == other.HotelId ||
                    this.HotelId != null &&
                    this.HotelId.Equals(other.HotelId)
                ) && 
                (
                    this.RoomId == other.RoomId ||
                    this.RoomId != null &&
                    this.RoomId.Equals(other.RoomId)
                ) && 
                (
                    this.Action == other.Action ||
                    this.Action != null &&
                    this.Action.Equals(other.Action)
                ) && 
                (
                    this.StartDate == other.StartDate ||
                    this.StartDate != null &&
                    this.StartDate.Equals(other.StartDate)
                ) && 
                (
                    this.EndDate == other.EndDate ||
                    this.EndDate != null &&
                    this.EndDate.Equals(other.EndDate)
                ) && 
                (
                    this.NewValue == other.NewValue ||
                    this.NewValue != null &&
                    this.NewValue.Equals(other.NewValue)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.HotelId != null)
                    hash = hash * 59 + this.HotelId.GetHashCode();
                if (this.RoomId != null)
                    hash = hash * 59 + this.RoomId.GetHashCode();
                if (this.Action != null)
                    hash = hash * 59 + this.Action.GetHashCode();
                if (this.StartDate != null)
                    hash = hash * 59 + this.StartDate.GetHashCode();
                if (this.EndDate != null)
                    hash = hash * 59 + this.EndDate.GetHashCode();
                if (this.NewValue != null)
                    hash = hash * 59 + this.NewValue.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
