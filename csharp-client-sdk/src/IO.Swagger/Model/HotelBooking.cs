/* 
 * EasyTravelApi
 *
 * API for travel agents
 *
 * OpenAPI spec version: 0.1.9
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace IO.Swagger.Model
{
    /// <summary>
    /// A booking service
    /// </summary>
    [DataContract]
    public partial class HotelBooking :  IEquatable<HotelBooking>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="HotelBooking" /> class.
        /// </summary>
        /// <param name="BookingId">The booking id.</param>
        /// <param name="Created">When this service was created. In ISO8651 format.</param>
        /// <param name="CreatedBy">Who created this service booking.</param>
        /// <param name="Modified">Last modification date for this service in ISO8651 format.</param>
        /// <param name="ServiceType">Type of service. Intended to be HOTEL, TRANSFER, ACTIVITY, ....</param>
        /// <param name="ServiceDescription">Description of the service.</param>
        /// <param name="Start">When this service starts using locale. In YYYYMMDD format.</param>
        /// <param name="End">When this service ends using locale. In YYYYMMDD format.</param>
        /// <param name="Status">Status for this service. E.g. OK, ONREQUEST, CANCELLED, ....</param>
        /// <param name="LeadName">This service lead name.</param>
        /// <param name="RetailValue">RetailValue.</param>
        /// <param name="NetValue">NetValue.</param>
        /// <param name="CommissionValue">CommissionValue.</param>
        /// <param name="CommentsToProvider">Comments from the customer.</param>
        /// <param name="PrivateComments">Comments for you. Not to be shown to the customer.</param>
        /// <param name="Stays">List of stays (rooms, occupation and boards).</param>
        public HotelBooking(string BookingId = null, string Created = null, string CreatedBy = null, string Modified = null, string ServiceType = null, string ServiceDescription = null, string Start = null, string End = null, string Status = null, string LeadName = null, Amount RetailValue = null, Amount NetValue = null, Amount CommissionValue = null, string CommentsToProvider = null, string PrivateComments = null, List<Stay> Stays = null)
        {
            this.BookingId = BookingId;
            this.Created = Created;
            this.CreatedBy = CreatedBy;
            this.Modified = Modified;
            this.ServiceType = ServiceType;
            this.ServiceDescription = ServiceDescription;
            this.Start = Start;
            this.End = End;
            this.Status = Status;
            this.LeadName = LeadName;
            this.RetailValue = RetailValue;
            this.NetValue = NetValue;
            this.CommissionValue = CommissionValue;
            this.CommentsToProvider = CommentsToProvider;
            this.PrivateComments = PrivateComments;
            this.Stays = Stays;
        }
        
        /// <summary>
        /// The booking id
        /// </summary>
        /// <value>The booking id</value>
        [DataMember(Name="bookingId", EmitDefaultValue=false)]
        public string BookingId { get; set; }
        /// <summary>
        /// When this service was created. In ISO8651 format
        /// </summary>
        /// <value>When this service was created. In ISO8651 format</value>
        [DataMember(Name="created", EmitDefaultValue=false)]
        public string Created { get; set; }
        /// <summary>
        /// Who created this service booking
        /// </summary>
        /// <value>Who created this service booking</value>
        [DataMember(Name="createdBy", EmitDefaultValue=false)]
        public string CreatedBy { get; set; }
        /// <summary>
        /// Last modification date for this service in ISO8651 format
        /// </summary>
        /// <value>Last modification date for this service in ISO8651 format</value>
        [DataMember(Name="modified", EmitDefaultValue=false)]
        public string Modified { get; set; }
        /// <summary>
        /// Type of service. Intended to be HOTEL, TRANSFER, ACTIVITY, ...
        /// </summary>
        /// <value>Type of service. Intended to be HOTEL, TRANSFER, ACTIVITY, ...</value>
        [DataMember(Name="serviceType", EmitDefaultValue=false)]
        public string ServiceType { get; set; }
        /// <summary>
        /// Description of the service
        /// </summary>
        /// <value>Description of the service</value>
        [DataMember(Name="serviceDescription", EmitDefaultValue=false)]
        public string ServiceDescription { get; set; }
        /// <summary>
        /// When this service starts using locale. In YYYYMMDD format
        /// </summary>
        /// <value>When this service starts using locale. In YYYYMMDD format</value>
        [DataMember(Name="start", EmitDefaultValue=false)]
        public string Start { get; set; }
        /// <summary>
        /// When this service ends using locale. In YYYYMMDD format
        /// </summary>
        /// <value>When this service ends using locale. In YYYYMMDD format</value>
        [DataMember(Name="end", EmitDefaultValue=false)]
        public string End { get; set; }
        /// <summary>
        /// Status for this service. E.g. OK, ONREQUEST, CANCELLED, ...
        /// </summary>
        /// <value>Status for this service. E.g. OK, ONREQUEST, CANCELLED, ...</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public string Status { get; set; }
        /// <summary>
        /// This service lead name
        /// </summary>
        /// <value>This service lead name</value>
        [DataMember(Name="leadName", EmitDefaultValue=false)]
        public string LeadName { get; set; }
        /// <summary>
        /// Gets or Sets RetailValue
        /// </summary>
        [DataMember(Name="retailValue", EmitDefaultValue=false)]
        public Amount RetailValue { get; set; }
        /// <summary>
        /// Gets or Sets NetValue
        /// </summary>
        [DataMember(Name="netValue", EmitDefaultValue=false)]
        public Amount NetValue { get; set; }
        /// <summary>
        /// Gets or Sets CommissionValue
        /// </summary>
        [DataMember(Name="commissionValue", EmitDefaultValue=false)]
        public Amount CommissionValue { get; set; }
        /// <summary>
        /// Comments from the customer
        /// </summary>
        /// <value>Comments from the customer</value>
        [DataMember(Name="commentsToProvider", EmitDefaultValue=false)]
        public string CommentsToProvider { get; set; }
        /// <summary>
        /// Comments for you. Not to be shown to the customer
        /// </summary>
        /// <value>Comments for you. Not to be shown to the customer</value>
        [DataMember(Name="privateComments", EmitDefaultValue=false)]
        public string PrivateComments { get; set; }
        /// <summary>
        /// List of stays (rooms, occupation and boards)
        /// </summary>
        /// <value>List of stays (rooms, occupation and boards)</value>
        [DataMember(Name="stays", EmitDefaultValue=false)]
        public List<Stay> Stays { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class HotelBooking {\n");
            sb.Append("  BookingId: ").Append(BookingId).Append("\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("  CreatedBy: ").Append(CreatedBy).Append("\n");
            sb.Append("  Modified: ").Append(Modified).Append("\n");
            sb.Append("  ServiceType: ").Append(ServiceType).Append("\n");
            sb.Append("  ServiceDescription: ").Append(ServiceDescription).Append("\n");
            sb.Append("  Start: ").Append(Start).Append("\n");
            sb.Append("  End: ").Append(End).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  LeadName: ").Append(LeadName).Append("\n");
            sb.Append("  RetailValue: ").Append(RetailValue).Append("\n");
            sb.Append("  NetValue: ").Append(NetValue).Append("\n");
            sb.Append("  CommissionValue: ").Append(CommissionValue).Append("\n");
            sb.Append("  CommentsToProvider: ").Append(CommentsToProvider).Append("\n");
            sb.Append("  PrivateComments: ").Append(PrivateComments).Append("\n");
            sb.Append("  Stays: ").Append(Stays).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as HotelBooking);
        }

        /// <summary>
        /// Returns true if HotelBooking instances are equal
        /// </summary>
        /// <param name="other">Instance of HotelBooking to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(HotelBooking other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.BookingId == other.BookingId ||
                    this.BookingId != null &&
                    this.BookingId.Equals(other.BookingId)
                ) && 
                (
                    this.Created == other.Created ||
                    this.Created != null &&
                    this.Created.Equals(other.Created)
                ) && 
                (
                    this.CreatedBy == other.CreatedBy ||
                    this.CreatedBy != null &&
                    this.CreatedBy.Equals(other.CreatedBy)
                ) && 
                (
                    this.Modified == other.Modified ||
                    this.Modified != null &&
                    this.Modified.Equals(other.Modified)
                ) && 
                (
                    this.ServiceType == other.ServiceType ||
                    this.ServiceType != null &&
                    this.ServiceType.Equals(other.ServiceType)
                ) && 
                (
                    this.ServiceDescription == other.ServiceDescription ||
                    this.ServiceDescription != null &&
                    this.ServiceDescription.Equals(other.ServiceDescription)
                ) && 
                (
                    this.Start == other.Start ||
                    this.Start != null &&
                    this.Start.Equals(other.Start)
                ) && 
                (
                    this.End == other.End ||
                    this.End != null &&
                    this.End.Equals(other.End)
                ) && 
                (
                    this.Status == other.Status ||
                    this.Status != null &&
                    this.Status.Equals(other.Status)
                ) && 
                (
                    this.LeadName == other.LeadName ||
                    this.LeadName != null &&
                    this.LeadName.Equals(other.LeadName)
                ) && 
                (
                    this.RetailValue == other.RetailValue ||
                    this.RetailValue != null &&
                    this.RetailValue.Equals(other.RetailValue)
                ) && 
                (
                    this.NetValue == other.NetValue ||
                    this.NetValue != null &&
                    this.NetValue.Equals(other.NetValue)
                ) && 
                (
                    this.CommissionValue == other.CommissionValue ||
                    this.CommissionValue != null &&
                    this.CommissionValue.Equals(other.CommissionValue)
                ) && 
                (
                    this.CommentsToProvider == other.CommentsToProvider ||
                    this.CommentsToProvider != null &&
                    this.CommentsToProvider.Equals(other.CommentsToProvider)
                ) && 
                (
                    this.PrivateComments == other.PrivateComments ||
                    this.PrivateComments != null &&
                    this.PrivateComments.Equals(other.PrivateComments)
                ) && 
                (
                    this.Stays == other.Stays ||
                    this.Stays != null &&
                    this.Stays.SequenceEqual(other.Stays)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.BookingId != null)
                    hash = hash * 59 + this.BookingId.GetHashCode();
                if (this.Created != null)
                    hash = hash * 59 + this.Created.GetHashCode();
                if (this.CreatedBy != null)
                    hash = hash * 59 + this.CreatedBy.GetHashCode();
                if (this.Modified != null)
                    hash = hash * 59 + this.Modified.GetHashCode();
                if (this.ServiceType != null)
                    hash = hash * 59 + this.ServiceType.GetHashCode();
                if (this.ServiceDescription != null)
                    hash = hash * 59 + this.ServiceDescription.GetHashCode();
                if (this.Start != null)
                    hash = hash * 59 + this.Start.GetHashCode();
                if (this.End != null)
                    hash = hash * 59 + this.End.GetHashCode();
                if (this.Status != null)
                    hash = hash * 59 + this.Status.GetHashCode();
                if (this.LeadName != null)
                    hash = hash * 59 + this.LeadName.GetHashCode();
                if (this.RetailValue != null)
                    hash = hash * 59 + this.RetailValue.GetHashCode();
                if (this.NetValue != null)
                    hash = hash * 59 + this.NetValue.GetHashCode();
                if (this.CommissionValue != null)
                    hash = hash * 59 + this.CommissionValue.GetHashCode();
                if (this.CommentsToProvider != null)
                    hash = hash * 59 + this.CommentsToProvider.GetHashCode();
                if (this.PrivateComments != null)
                    hash = hash * 59 + this.PrivateComments.GetHashCode();
                if (this.Stays != null)
                    hash = hash * 59 + this.Stays.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
