/* 
 * EasyTravelApi
 *
 * API for travel agents
 *
 * OpenAPI spec version: 0.1.9
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace IO.Swagger.Model
{
    /// <summary>
    /// HolderForAnActivityDate
    /// </summary>
    [DataContract]
    public partial class HolderForAnActivityDate :  IEquatable<HolderForAnActivityDate>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="HolderForAnActivityDate" /> class.
        /// </summary>
        /// <param name="Date">Local date for the activity.</param>
        /// <param name="Time">Local time for the activity.</param>
        /// <param name="Key">Id for this price.</param>
        /// <param name="RetailPrice">RetailPrice.</param>
        /// <param name="NetPrice">NetPrice.</param>
        /// <param name="Commission">Commission.</param>
        public HolderForAnActivityDate(int? Date = null, int? Time = null, string Key = null, Amount RetailPrice = null, Amount NetPrice = null, Amount Commission = null)
        {
            this.Date = Date;
            this.Time = Time;
            this.Key = Key;
            this.RetailPrice = RetailPrice;
            this.NetPrice = NetPrice;
            this.Commission = Commission;
        }
        
        /// <summary>
        /// Local date for the activity
        /// </summary>
        /// <value>Local date for the activity</value>
        [DataMember(Name="date", EmitDefaultValue=false)]
        public int? Date { get; set; }
        /// <summary>
        /// Local time for the activity
        /// </summary>
        /// <value>Local time for the activity</value>
        [DataMember(Name="time", EmitDefaultValue=false)]
        public int? Time { get; set; }
        /// <summary>
        /// Id for this price
        /// </summary>
        /// <value>Id for this price</value>
        [DataMember(Name="key", EmitDefaultValue=false)]
        public string Key { get; set; }
        /// <summary>
        /// Gets or Sets RetailPrice
        /// </summary>
        [DataMember(Name="retailPrice", EmitDefaultValue=false)]
        public Amount RetailPrice { get; set; }
        /// <summary>
        /// Gets or Sets NetPrice
        /// </summary>
        [DataMember(Name="netPrice", EmitDefaultValue=false)]
        public Amount NetPrice { get; set; }
        /// <summary>
        /// Gets or Sets Commission
        /// </summary>
        [DataMember(Name="commission", EmitDefaultValue=false)]
        public Amount Commission { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class HolderForAnActivityDate {\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  Time: ").Append(Time).Append("\n");
            sb.Append("  Key: ").Append(Key).Append("\n");
            sb.Append("  RetailPrice: ").Append(RetailPrice).Append("\n");
            sb.Append("  NetPrice: ").Append(NetPrice).Append("\n");
            sb.Append("  Commission: ").Append(Commission).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as HolderForAnActivityDate);
        }

        /// <summary>
        /// Returns true if HolderForAnActivityDate instances are equal
        /// </summary>
        /// <param name="other">Instance of HolderForAnActivityDate to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(HolderForAnActivityDate other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Date == other.Date ||
                    this.Date != null &&
                    this.Date.Equals(other.Date)
                ) && 
                (
                    this.Time == other.Time ||
                    this.Time != null &&
                    this.Time.Equals(other.Time)
                ) && 
                (
                    this.Key == other.Key ||
                    this.Key != null &&
                    this.Key.Equals(other.Key)
                ) && 
                (
                    this.RetailPrice == other.RetailPrice ||
                    this.RetailPrice != null &&
                    this.RetailPrice.Equals(other.RetailPrice)
                ) && 
                (
                    this.NetPrice == other.NetPrice ||
                    this.NetPrice != null &&
                    this.NetPrice.Equals(other.NetPrice)
                ) && 
                (
                    this.Commission == other.Commission ||
                    this.Commission != null &&
                    this.Commission.Equals(other.Commission)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Date != null)
                    hash = hash * 59 + this.Date.GetHashCode();
                if (this.Time != null)
                    hash = hash * 59 + this.Time.GetHashCode();
                if (this.Key != null)
                    hash = hash * 59 + this.Key.GetHashCode();
                if (this.RetailPrice != null)
                    hash = hash * 59 + this.RetailPrice.GetHashCode();
                if (this.NetPrice != null)
                    hash = hash * 59 + this.NetPrice.GetHashCode();
                if (this.Commission != null)
                    hash = hash * 59 + this.Commission.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
