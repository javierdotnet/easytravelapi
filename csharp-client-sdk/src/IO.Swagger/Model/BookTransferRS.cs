/* 
 * EasyTravelApi
 *
 * API for travel agents
 *
 * OpenAPI spec version: 0.1.9
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Container for the tranfer booking confirmation response
    /// </summary>
    [DataContract]
    public partial class BookTransferRS :  IEquatable<BookTransferRS>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BookTransferRS" /> class.
        /// </summary>
        /// <param name="StatusCode">status code for the operation. It will be 200 if it was OK and any other value if something went wrong. Provider dependant.</param>
        /// <param name="Msg">error message, if needed.</param>
        /// <param name="SystemTime">System time in ISO8651 format. Useful for bug resolution.</param>
        /// <param name="BookingId">Resultant booking id.</param>
        public BookTransferRS(int? StatusCode = null, string Msg = null, string SystemTime = null, string BookingId = null)
        {
            this.StatusCode = StatusCode;
            this.Msg = Msg;
            this.SystemTime = SystemTime;
            this.BookingId = BookingId;
        }
        
        /// <summary>
        /// status code for the operation. It will be 200 if it was OK and any other value if something went wrong. Provider dependant
        /// </summary>
        /// <value>status code for the operation. It will be 200 if it was OK and any other value if something went wrong. Provider dependant</value>
        [DataMember(Name="statusCode", EmitDefaultValue=false)]
        public int? StatusCode { get; set; }
        /// <summary>
        /// error message, if needed
        /// </summary>
        /// <value>error message, if needed</value>
        [DataMember(Name="msg", EmitDefaultValue=false)]
        public string Msg { get; set; }
        /// <summary>
        /// System time in ISO8651 format. Useful for bug resolution
        /// </summary>
        /// <value>System time in ISO8651 format. Useful for bug resolution</value>
        [DataMember(Name="systemTime", EmitDefaultValue=false)]
        public string SystemTime { get; set; }
        /// <summary>
        /// Resultant booking id
        /// </summary>
        /// <value>Resultant booking id</value>
        [DataMember(Name="bookingId", EmitDefaultValue=false)]
        public string BookingId { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BookTransferRS {\n");
            sb.Append("  StatusCode: ").Append(StatusCode).Append("\n");
            sb.Append("  Msg: ").Append(Msg).Append("\n");
            sb.Append("  SystemTime: ").Append(SystemTime).Append("\n");
            sb.Append("  BookingId: ").Append(BookingId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as BookTransferRS);
        }

        /// <summary>
        /// Returns true if BookTransferRS instances are equal
        /// </summary>
        /// <param name="other">Instance of BookTransferRS to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BookTransferRS other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.StatusCode == other.StatusCode ||
                    this.StatusCode != null &&
                    this.StatusCode.Equals(other.StatusCode)
                ) && 
                (
                    this.Msg == other.Msg ||
                    this.Msg != null &&
                    this.Msg.Equals(other.Msg)
                ) && 
                (
                    this.SystemTime == other.SystemTime ||
                    this.SystemTime != null &&
                    this.SystemTime.Equals(other.SystemTime)
                ) && 
                (
                    this.BookingId == other.BookingId ||
                    this.BookingId != null &&
                    this.BookingId.Equals(other.BookingId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.StatusCode != null)
                    hash = hash * 59 + this.StatusCode.GetHashCode();
                if (this.Msg != null)
                    hash = hash * 59 + this.Msg.GetHashCode();
                if (this.SystemTime != null)
                    hash = hash * 59 + this.SystemTime.GetHashCode();
                if (this.BookingId != null)
                    hash = hash * 59 + this.BookingId.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
