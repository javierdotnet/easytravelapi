/* 
 * EasyTravelApi
 *
 * API for travel agents
 *
 * OpenAPI spec version: 0.1.9
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Container for the transfer service confirmation request
    /// </summary>
    [DataContract]
    public partial class BookTransferRQ :  IEquatable<BookTransferRQ>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BookTransferRQ" /> class.
        /// </summary>
        /// <param name="AgentId">Your id. As provided.</param>
        /// <param name="UserName">Your user name. As provided.</param>
        /// <param name="Password">Your password. As provided.</param>
        /// <param name="LanguageIsoCode">The language iso code you want descriptions (when available. E.g. room names, hotel descriptions, ...) to be returned in.</param>
        /// <param name="Key">The price id, as we got it when we asked for available hotels.</param>
        /// <param name="BookingReference">A free text reference you want to appear in the final invoice, so you can match it when validating our invoices.</param>
        /// <param name="LeadName">The lead name.</param>
        /// <param name="CommentsToProvider">Comments from the customer which should arrive to the activity provider.</param>
        /// <param name="PrivateComments">Your comments for us. They will not be visible to the customer neither to the activity provider.</param>
        /// <param name="IncomingFlightNumber">Incoming flight number.</param>
        /// <param name="IncomingFlightTime">Locale incoming flight time in YYYYMMDDHHMM format.</param>
        /// <param name="IncomingFlightOrigin">Incoming flight origin.</param>
        /// <param name="OutgoingFlightNumber">Outgoing flight number.</param>
        /// <param name="OutgoingFlightTime">Locale outgoing flight time in YYYYMMDDHHMM format.</param>
        /// <param name="OutgoingFlightDestination">Outgoing flight origin.</param>
        public BookTransferRQ(string AgentId = null, string UserName = null, string Password = null, string LanguageIsoCode = null, string Key = null, string BookingReference = null, string LeadName = null, string CommentsToProvider = null, string PrivateComments = null, string IncomingFlightNumber = null, int? IncomingFlightTime = null, string IncomingFlightOrigin = null, string OutgoingFlightNumber = null, int? OutgoingFlightTime = null, string OutgoingFlightDestination = null)
        {
            this.AgentId = AgentId;
            this.UserName = UserName;
            this.Password = Password;
            this.LanguageIsoCode = LanguageIsoCode;
            this.Key = Key;
            this.BookingReference = BookingReference;
            this.LeadName = LeadName;
            this.CommentsToProvider = CommentsToProvider;
            this.PrivateComments = PrivateComments;
            this.IncomingFlightNumber = IncomingFlightNumber;
            this.IncomingFlightTime = IncomingFlightTime;
            this.IncomingFlightOrigin = IncomingFlightOrigin;
            this.OutgoingFlightNumber = OutgoingFlightNumber;
            this.OutgoingFlightTime = OutgoingFlightTime;
            this.OutgoingFlightDestination = OutgoingFlightDestination;
        }
        
        /// <summary>
        /// Your id. As provided
        /// </summary>
        /// <value>Your id. As provided</value>
        [DataMember(Name="agentId", EmitDefaultValue=false)]
        public string AgentId { get; set; }
        /// <summary>
        /// Your user name. As provided
        /// </summary>
        /// <value>Your user name. As provided</value>
        [DataMember(Name="userName", EmitDefaultValue=false)]
        public string UserName { get; set; }
        /// <summary>
        /// Your password. As provided
        /// </summary>
        /// <value>Your password. As provided</value>
        [DataMember(Name="password", EmitDefaultValue=false)]
        public string Password { get; set; }
        /// <summary>
        /// The language iso code you want descriptions (when available. E.g. room names, hotel descriptions, ...) to be returned in
        /// </summary>
        /// <value>The language iso code you want descriptions (when available. E.g. room names, hotel descriptions, ...) to be returned in</value>
        [DataMember(Name="languageIsoCode", EmitDefaultValue=false)]
        public string LanguageIsoCode { get; set; }
        /// <summary>
        /// The price id, as we got it when we asked for available hotels
        /// </summary>
        /// <value>The price id, as we got it when we asked for available hotels</value>
        [DataMember(Name="key", EmitDefaultValue=false)]
        public string Key { get; set; }
        /// <summary>
        /// A free text reference you want to appear in the final invoice, so you can match it when validating our invoices
        /// </summary>
        /// <value>A free text reference you want to appear in the final invoice, so you can match it when validating our invoices</value>
        [DataMember(Name="bookingReference", EmitDefaultValue=false)]
        public string BookingReference { get; set; }
        /// <summary>
        /// The lead name
        /// </summary>
        /// <value>The lead name</value>
        [DataMember(Name="leadName", EmitDefaultValue=false)]
        public string LeadName { get; set; }
        /// <summary>
        /// Comments from the customer which should arrive to the activity provider
        /// </summary>
        /// <value>Comments from the customer which should arrive to the activity provider</value>
        [DataMember(Name="commentsToProvider", EmitDefaultValue=false)]
        public string CommentsToProvider { get; set; }
        /// <summary>
        /// Your comments for us. They will not be visible to the customer neither to the activity provider
        /// </summary>
        /// <value>Your comments for us. They will not be visible to the customer neither to the activity provider</value>
        [DataMember(Name="privateComments", EmitDefaultValue=false)]
        public string PrivateComments { get; set; }
        /// <summary>
        /// Incoming flight number
        /// </summary>
        /// <value>Incoming flight number</value>
        [DataMember(Name="incomingFlightNumber", EmitDefaultValue=false)]
        public string IncomingFlightNumber { get; set; }
        /// <summary>
        /// Locale incoming flight time in YYYYMMDDHHMM format
        /// </summary>
        /// <value>Locale incoming flight time in YYYYMMDDHHMM format</value>
        [DataMember(Name="incomingFlightTime", EmitDefaultValue=false)]
        public int? IncomingFlightTime { get; set; }
        /// <summary>
        /// Incoming flight origin
        /// </summary>
        /// <value>Incoming flight origin</value>
        [DataMember(Name="incomingFlightOrigin", EmitDefaultValue=false)]
        public string IncomingFlightOrigin { get; set; }
        /// <summary>
        /// Outgoing flight number
        /// </summary>
        /// <value>Outgoing flight number</value>
        [DataMember(Name="outgoingFlightNumber", EmitDefaultValue=false)]
        public string OutgoingFlightNumber { get; set; }
        /// <summary>
        /// Locale outgoing flight time in YYYYMMDDHHMM format
        /// </summary>
        /// <value>Locale outgoing flight time in YYYYMMDDHHMM format</value>
        [DataMember(Name="outgoingFlightTime", EmitDefaultValue=false)]
        public int? OutgoingFlightTime { get; set; }
        /// <summary>
        /// Outgoing flight origin
        /// </summary>
        /// <value>Outgoing flight origin</value>
        [DataMember(Name="outgoingFlightDestination", EmitDefaultValue=false)]
        public string OutgoingFlightDestination { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BookTransferRQ {\n");
            sb.Append("  AgentId: ").Append(AgentId).Append("\n");
            sb.Append("  UserName: ").Append(UserName).Append("\n");
            sb.Append("  Password: ").Append(Password).Append("\n");
            sb.Append("  LanguageIsoCode: ").Append(LanguageIsoCode).Append("\n");
            sb.Append("  Key: ").Append(Key).Append("\n");
            sb.Append("  BookingReference: ").Append(BookingReference).Append("\n");
            sb.Append("  LeadName: ").Append(LeadName).Append("\n");
            sb.Append("  CommentsToProvider: ").Append(CommentsToProvider).Append("\n");
            sb.Append("  PrivateComments: ").Append(PrivateComments).Append("\n");
            sb.Append("  IncomingFlightNumber: ").Append(IncomingFlightNumber).Append("\n");
            sb.Append("  IncomingFlightTime: ").Append(IncomingFlightTime).Append("\n");
            sb.Append("  IncomingFlightOrigin: ").Append(IncomingFlightOrigin).Append("\n");
            sb.Append("  OutgoingFlightNumber: ").Append(OutgoingFlightNumber).Append("\n");
            sb.Append("  OutgoingFlightTime: ").Append(OutgoingFlightTime).Append("\n");
            sb.Append("  OutgoingFlightDestination: ").Append(OutgoingFlightDestination).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as BookTransferRQ);
        }

        /// <summary>
        /// Returns true if BookTransferRQ instances are equal
        /// </summary>
        /// <param name="other">Instance of BookTransferRQ to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BookTransferRQ other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.AgentId == other.AgentId ||
                    this.AgentId != null &&
                    this.AgentId.Equals(other.AgentId)
                ) && 
                (
                    this.UserName == other.UserName ||
                    this.UserName != null &&
                    this.UserName.Equals(other.UserName)
                ) && 
                (
                    this.Password == other.Password ||
                    this.Password != null &&
                    this.Password.Equals(other.Password)
                ) && 
                (
                    this.LanguageIsoCode == other.LanguageIsoCode ||
                    this.LanguageIsoCode != null &&
                    this.LanguageIsoCode.Equals(other.LanguageIsoCode)
                ) && 
                (
                    this.Key == other.Key ||
                    this.Key != null &&
                    this.Key.Equals(other.Key)
                ) && 
                (
                    this.BookingReference == other.BookingReference ||
                    this.BookingReference != null &&
                    this.BookingReference.Equals(other.BookingReference)
                ) && 
                (
                    this.LeadName == other.LeadName ||
                    this.LeadName != null &&
                    this.LeadName.Equals(other.LeadName)
                ) && 
                (
                    this.CommentsToProvider == other.CommentsToProvider ||
                    this.CommentsToProvider != null &&
                    this.CommentsToProvider.Equals(other.CommentsToProvider)
                ) && 
                (
                    this.PrivateComments == other.PrivateComments ||
                    this.PrivateComments != null &&
                    this.PrivateComments.Equals(other.PrivateComments)
                ) && 
                (
                    this.IncomingFlightNumber == other.IncomingFlightNumber ||
                    this.IncomingFlightNumber != null &&
                    this.IncomingFlightNumber.Equals(other.IncomingFlightNumber)
                ) && 
                (
                    this.IncomingFlightTime == other.IncomingFlightTime ||
                    this.IncomingFlightTime != null &&
                    this.IncomingFlightTime.Equals(other.IncomingFlightTime)
                ) && 
                (
                    this.IncomingFlightOrigin == other.IncomingFlightOrigin ||
                    this.IncomingFlightOrigin != null &&
                    this.IncomingFlightOrigin.Equals(other.IncomingFlightOrigin)
                ) && 
                (
                    this.OutgoingFlightNumber == other.OutgoingFlightNumber ||
                    this.OutgoingFlightNumber != null &&
                    this.OutgoingFlightNumber.Equals(other.OutgoingFlightNumber)
                ) && 
                (
                    this.OutgoingFlightTime == other.OutgoingFlightTime ||
                    this.OutgoingFlightTime != null &&
                    this.OutgoingFlightTime.Equals(other.OutgoingFlightTime)
                ) && 
                (
                    this.OutgoingFlightDestination == other.OutgoingFlightDestination ||
                    this.OutgoingFlightDestination != null &&
                    this.OutgoingFlightDestination.Equals(other.OutgoingFlightDestination)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.AgentId != null)
                    hash = hash * 59 + this.AgentId.GetHashCode();
                if (this.UserName != null)
                    hash = hash * 59 + this.UserName.GetHashCode();
                if (this.Password != null)
                    hash = hash * 59 + this.Password.GetHashCode();
                if (this.LanguageIsoCode != null)
                    hash = hash * 59 + this.LanguageIsoCode.GetHashCode();
                if (this.Key != null)
                    hash = hash * 59 + this.Key.GetHashCode();
                if (this.BookingReference != null)
                    hash = hash * 59 + this.BookingReference.GetHashCode();
                if (this.LeadName != null)
                    hash = hash * 59 + this.LeadName.GetHashCode();
                if (this.CommentsToProvider != null)
                    hash = hash * 59 + this.CommentsToProvider.GetHashCode();
                if (this.PrivateComments != null)
                    hash = hash * 59 + this.PrivateComments.GetHashCode();
                if (this.IncomingFlightNumber != null)
                    hash = hash * 59 + this.IncomingFlightNumber.GetHashCode();
                if (this.IncomingFlightTime != null)
                    hash = hash * 59 + this.IncomingFlightTime.GetHashCode();
                if (this.IncomingFlightOrigin != null)
                    hash = hash * 59 + this.IncomingFlightOrigin.GetHashCode();
                if (this.OutgoingFlightNumber != null)
                    hash = hash * 59 + this.OutgoingFlightNumber.GetHashCode();
                if (this.OutgoingFlightTime != null)
                    hash = hash * 59 + this.OutgoingFlightTime.GetHashCode();
                if (this.OutgoingFlightDestination != null)
                    hash = hash * 59 + this.OutgoingFlightDestination.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
