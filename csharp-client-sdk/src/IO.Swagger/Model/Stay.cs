/* 
 * EasyTravelApi
 *
 * API for travel agents
 *
 * OpenAPI spec version: 0.1.9
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace IO.Swagger.Model
{
    /// <summary>
    /// A stay line inside a hotel booking service
    /// </summary>
    [DataContract]
    public partial class Stay :  IEquatable<Stay>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Stay" /> class.
        /// </summary>
        /// <param name="Start">When this stay starts in locale. In YYYYMMDD format.</param>
        /// <param name="End">When this stay ends in locale. In YYYYMMDD format.</param>
        /// <param name="RoomId">The room id.</param>
        /// <param name="RoomName">The room name.</param>
        /// <param name="BoardBasisId">The board basis id.</param>
        /// <param name="BoardBasisName">The board basis name.</param>
        /// <param name="NumberOfRooms">The number of rooms for this line.</param>
        /// <param name="PaxPerRoom">How many pax will stay per room for this line.</param>
        /// <param name="Ages">Ages for the pax. If ommited pax will be assumed to be an adult.</param>
        public Stay(int? Start = null, int? End = null, string RoomId = null, string RoomName = null, string BoardBasisId = null, string BoardBasisName = null, int? NumberOfRooms = null, int? PaxPerRoom = null, List<int?> Ages = null)
        {
            this.Start = Start;
            this.End = End;
            this.RoomId = RoomId;
            this.RoomName = RoomName;
            this.BoardBasisId = BoardBasisId;
            this.BoardBasisName = BoardBasisName;
            this.NumberOfRooms = NumberOfRooms;
            this.PaxPerRoom = PaxPerRoom;
            this.Ages = Ages;
        }
        
        /// <summary>
        /// When this stay starts in locale. In YYYYMMDD format
        /// </summary>
        /// <value>When this stay starts in locale. In YYYYMMDD format</value>
        [DataMember(Name="start", EmitDefaultValue=false)]
        public int? Start { get; set; }
        /// <summary>
        /// When this stay ends in locale. In YYYYMMDD format
        /// </summary>
        /// <value>When this stay ends in locale. In YYYYMMDD format</value>
        [DataMember(Name="end", EmitDefaultValue=false)]
        public int? End { get; set; }
        /// <summary>
        /// The room id
        /// </summary>
        /// <value>The room id</value>
        [DataMember(Name="roomId", EmitDefaultValue=false)]
        public string RoomId { get; set; }
        /// <summary>
        /// The room name
        /// </summary>
        /// <value>The room name</value>
        [DataMember(Name="roomName", EmitDefaultValue=false)]
        public string RoomName { get; set; }
        /// <summary>
        /// The board basis id
        /// </summary>
        /// <value>The board basis id</value>
        [DataMember(Name="boardBasisId", EmitDefaultValue=false)]
        public string BoardBasisId { get; set; }
        /// <summary>
        /// The board basis name
        /// </summary>
        /// <value>The board basis name</value>
        [DataMember(Name="boardBasisName", EmitDefaultValue=false)]
        public string BoardBasisName { get; set; }
        /// <summary>
        /// The number of rooms for this line
        /// </summary>
        /// <value>The number of rooms for this line</value>
        [DataMember(Name="numberOfRooms", EmitDefaultValue=false)]
        public int? NumberOfRooms { get; set; }
        /// <summary>
        /// How many pax will stay per room for this line
        /// </summary>
        /// <value>How many pax will stay per room for this line</value>
        [DataMember(Name="paxPerRoom", EmitDefaultValue=false)]
        public int? PaxPerRoom { get; set; }
        /// <summary>
        /// Ages for the pax. If ommited pax will be assumed to be an adult
        /// </summary>
        /// <value>Ages for the pax. If ommited pax will be assumed to be an adult</value>
        [DataMember(Name="ages", EmitDefaultValue=false)]
        public List<int?> Ages { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Stay {\n");
            sb.Append("  Start: ").Append(Start).Append("\n");
            sb.Append("  End: ").Append(End).Append("\n");
            sb.Append("  RoomId: ").Append(RoomId).Append("\n");
            sb.Append("  RoomName: ").Append(RoomName).Append("\n");
            sb.Append("  BoardBasisId: ").Append(BoardBasisId).Append("\n");
            sb.Append("  BoardBasisName: ").Append(BoardBasisName).Append("\n");
            sb.Append("  NumberOfRooms: ").Append(NumberOfRooms).Append("\n");
            sb.Append("  PaxPerRoom: ").Append(PaxPerRoom).Append("\n");
            sb.Append("  Ages: ").Append(Ages).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Stay);
        }

        /// <summary>
        /// Returns true if Stay instances are equal
        /// </summary>
        /// <param name="other">Instance of Stay to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Stay other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Start == other.Start ||
                    this.Start != null &&
                    this.Start.Equals(other.Start)
                ) && 
                (
                    this.End == other.End ||
                    this.End != null &&
                    this.End.Equals(other.End)
                ) && 
                (
                    this.RoomId == other.RoomId ||
                    this.RoomId != null &&
                    this.RoomId.Equals(other.RoomId)
                ) && 
                (
                    this.RoomName == other.RoomName ||
                    this.RoomName != null &&
                    this.RoomName.Equals(other.RoomName)
                ) && 
                (
                    this.BoardBasisId == other.BoardBasisId ||
                    this.BoardBasisId != null &&
                    this.BoardBasisId.Equals(other.BoardBasisId)
                ) && 
                (
                    this.BoardBasisName == other.BoardBasisName ||
                    this.BoardBasisName != null &&
                    this.BoardBasisName.Equals(other.BoardBasisName)
                ) && 
                (
                    this.NumberOfRooms == other.NumberOfRooms ||
                    this.NumberOfRooms != null &&
                    this.NumberOfRooms.Equals(other.NumberOfRooms)
                ) && 
                (
                    this.PaxPerRoom == other.PaxPerRoom ||
                    this.PaxPerRoom != null &&
                    this.PaxPerRoom.Equals(other.PaxPerRoom)
                ) && 
                (
                    this.Ages == other.Ages ||
                    this.Ages != null &&
                    this.Ages.SequenceEqual(other.Ages)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Start != null)
                    hash = hash * 59 + this.Start.GetHashCode();
                if (this.End != null)
                    hash = hash * 59 + this.End.GetHashCode();
                if (this.RoomId != null)
                    hash = hash * 59 + this.RoomId.GetHashCode();
                if (this.RoomName != null)
                    hash = hash * 59 + this.RoomName.GetHashCode();
                if (this.BoardBasisId != null)
                    hash = hash * 59 + this.BoardBasisId.GetHashCode();
                if (this.BoardBasisName != null)
                    hash = hash * 59 + this.BoardBasisName.GetHashCode();
                if (this.NumberOfRooms != null)
                    hash = hash * 59 + this.NumberOfRooms.GetHashCode();
                if (this.PaxPerRoom != null)
                    hash = hash * 59 + this.PaxPerRoom.GetHashCode();
                if (this.Ages != null)
                    hash = hash * 59 + this.Ages.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
