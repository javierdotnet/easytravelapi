/* 
 * EasyTravelApi
 *
 * API for travel agents
 *
 * OpenAPI spec version: 0.1.9
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace IO.Swagger.Model
{
    /// <summary>
    /// An occupied room and the available board basis
    /// </summary>
    [DataContract]
    public partial class Allocation :  IEquatable<Allocation>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Allocation" /> class.
        /// </summary>
        /// <param name="NumberOfRooms">Number of rooms.</param>
        /// <param name="PaxPerRoom">Pax per room.</param>
        /// <param name="Ages">Ages. If not present we will assume the pax is an adult.</param>
        /// <param name="RoomId">This room type id.</param>
        /// <param name="RoomName">This room type name.</param>
        /// <param name="Prices">List of available board basis and prices for each board.</param>
        public Allocation(int? NumberOfRooms = null, int? PaxPerRoom = null, List<int?> Ages = null, string RoomId = null, string RoomName = null, List<BoardPrice> Prices = null)
        {
            this.NumberOfRooms = NumberOfRooms;
            this.PaxPerRoom = PaxPerRoom;
            this.Ages = Ages;
            this.RoomId = RoomId;
            this.RoomName = RoomName;
            this.Prices = Prices;
        }
        
        /// <summary>
        /// Number of rooms
        /// </summary>
        /// <value>Number of rooms</value>
        [DataMember(Name="numberOfRooms", EmitDefaultValue=false)]
        public int? NumberOfRooms { get; set; }
        /// <summary>
        /// Pax per room
        /// </summary>
        /// <value>Pax per room</value>
        [DataMember(Name="paxPerRoom", EmitDefaultValue=false)]
        public int? PaxPerRoom { get; set; }
        /// <summary>
        /// Ages. If not present we will assume the pax is an adult
        /// </summary>
        /// <value>Ages. If not present we will assume the pax is an adult</value>
        [DataMember(Name="ages", EmitDefaultValue=false)]
        public List<int?> Ages { get; set; }
        /// <summary>
        /// This room type id
        /// </summary>
        /// <value>This room type id</value>
        [DataMember(Name="roomId", EmitDefaultValue=false)]
        public string RoomId { get; set; }
        /// <summary>
        /// This room type name
        /// </summary>
        /// <value>This room type name</value>
        [DataMember(Name="roomName", EmitDefaultValue=false)]
        public string RoomName { get; set; }
        /// <summary>
        /// List of available board basis and prices for each board
        /// </summary>
        /// <value>List of available board basis and prices for each board</value>
        [DataMember(Name="prices", EmitDefaultValue=false)]
        public List<BoardPrice> Prices { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Allocation {\n");
            sb.Append("  NumberOfRooms: ").Append(NumberOfRooms).Append("\n");
            sb.Append("  PaxPerRoom: ").Append(PaxPerRoom).Append("\n");
            sb.Append("  Ages: ").Append(Ages).Append("\n");
            sb.Append("  RoomId: ").Append(RoomId).Append("\n");
            sb.Append("  RoomName: ").Append(RoomName).Append("\n");
            sb.Append("  Prices: ").Append(Prices).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Allocation);
        }

        /// <summary>
        /// Returns true if Allocation instances are equal
        /// </summary>
        /// <param name="other">Instance of Allocation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Allocation other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.NumberOfRooms == other.NumberOfRooms ||
                    this.NumberOfRooms != null &&
                    this.NumberOfRooms.Equals(other.NumberOfRooms)
                ) && 
                (
                    this.PaxPerRoom == other.PaxPerRoom ||
                    this.PaxPerRoom != null &&
                    this.PaxPerRoom.Equals(other.PaxPerRoom)
                ) && 
                (
                    this.Ages == other.Ages ||
                    this.Ages != null &&
                    this.Ages.SequenceEqual(other.Ages)
                ) && 
                (
                    this.RoomId == other.RoomId ||
                    this.RoomId != null &&
                    this.RoomId.Equals(other.RoomId)
                ) && 
                (
                    this.RoomName == other.RoomName ||
                    this.RoomName != null &&
                    this.RoomName.Equals(other.RoomName)
                ) && 
                (
                    this.Prices == other.Prices ||
                    this.Prices != null &&
                    this.Prices.SequenceEqual(other.Prices)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.NumberOfRooms != null)
                    hash = hash * 59 + this.NumberOfRooms.GetHashCode();
                if (this.PaxPerRoom != null)
                    hash = hash * 59 + this.PaxPerRoom.GetHashCode();
                if (this.Ages != null)
                    hash = hash * 59 + this.Ages.GetHashCode();
                if (this.RoomId != null)
                    hash = hash * 59 + this.RoomId.GetHashCode();
                if (this.RoomName != null)
                    hash = hash * 59 + this.RoomName.GetHashCode();
                if (this.Prices != null)
                    hash = hash * 59 + this.Prices.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
