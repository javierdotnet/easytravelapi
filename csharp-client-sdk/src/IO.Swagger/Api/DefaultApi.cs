/* 
 * EasyTravelApi
 *
 * API for travel agents
 *
 * OpenAPI spec version: 0.1.9
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDefaultApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Book an activity
        /// </summary>
        /// <remarks>
        /// Here you can confirm an activity booking. You must provide a price key and some additional data (lead name, comments, ...)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Auth token provided by your partner, and possibly renewed by using the /commons/newtoken method</param>
        /// <param name="body"> (optional)</param>
        /// <returns>BookActivityRS</returns>
        BookActivityRS BookActivity (string authtoken, BookActivityRQ body = null);

        /// <summary>
        /// Book an activity
        /// </summary>
        /// <remarks>
        /// Here you can confirm an activity booking. You must provide a price key and some additional data (lead name, comments, ...)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Auth token provided by your partner, and possibly renewed by using the /commons/newtoken method</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of BookActivityRS</returns>
        ApiResponse<BookActivityRS> BookActivityWithHttpInfo (string authtoken, BookActivityRQ body = null);
        /// <summary>
        /// Use this method to confirm a hotel service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Auth token provided by your partner, and possibly renewed by using the /commons/newtoken method</param>
        /// <param name="body"> (optional)</param>
        /// <returns>BookHotelRS</returns>
        BookHotelRS BookHotel (string authtoken, BookHotelRQ body = null);

        /// <summary>
        /// Use this method to confirm a hotel service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Auth token provided by your partner, and possibly renewed by using the /commons/newtoken method</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of BookHotelRS</returns>
        ApiResponse<BookHotelRS> BookHotelWithHttpInfo (string authtoken, BookHotelRQ body = null);
        /// <summary>
        /// Use this method to confirm a transfer service booking
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Auth token provided by your partner, and possibly renewed by using the /commons/newtoken method</param>
        /// <param name="body"> (optional)</param>
        /// <returns>BookTransferRS</returns>
        BookTransferRS BookTransfer (string authtoken, BookTransferRQ body = null);

        /// <summary>
        /// Use this method to confirm a transfer service booking
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Auth token provided by your partner, and possibly renewed by using the /commons/newtoken method</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of BookTransferRS</returns>
        ApiResponse<BookTransferRS> BookTransferWithHttpInfo (string authtoken, BookTransferRQ body = null);
        /// <summary>
        /// Method to cancel a service booking
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Auth token provided by your partner, and possibly renewed by using the /commons/newtoken method</param>
        /// <param name="bookingid">The service booking id you want to cancel</param>
        /// <returns>CancelBookingRS</returns>
        CancelBookingRS CancelBooking (string authtoken, string bookingid);

        /// <summary>
        /// Method to cancel a service booking
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Auth token provided by your partner, and possibly renewed by using the /commons/newtoken method</param>
        /// <param name="bookingid">The service booking id you want to cancel</param>
        /// <returns>ApiResponse of CancelBookingRS</returns>
        ApiResponse<CancelBookingRS> CancelBookingWithHttpInfo (string authtoken, string bookingid);
        /// <summary>
        /// Use this method to confirm or reject services
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Auth token provided by your partner, and possibly renewed by using the /commons/newtoken method</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ConfirmServicesRS</returns>
        ConfirmServicesRS ConfirmServices (string authtoken, ConfirmServicesRQ body = null);

        /// <summary>
        /// Use this method to confirm or reject services
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Auth token provided by your partner, and possibly renewed by using the /commons/newtoken method</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ConfirmServicesRS</returns>
        ApiResponse<ConfirmServicesRS> ConfirmServicesWithHttpInfo (string authtoken, ConfirmServicesRQ body = null);
        /// <summary>
        /// Get extra info
        /// </summary>
        /// <remarks>
        /// By passing a price key you get extra info
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Auth token provided by your partner, and possibly renewed by using the /commons/newtoken method</param>
        /// <param name="key">The activity price key, as provided in the /activity/available step</param>
        /// <returns>GetActivityPriceDetailsRS</returns>
        GetActivityPriceDetailsRS GetActivityPriceDetails (string authtoken, string key);

        /// <summary>
        /// Get extra info
        /// </summary>
        /// <remarks>
        /// By passing a price key you get extra info
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Auth token provided by your partner, and possibly renewed by using the /commons/newtoken method</param>
        /// <param name="key">The activity price key, as provided in the /activity/available step</param>
        /// <returns>ApiResponse of GetActivityPriceDetailsRS</returns>
        ApiResponse<GetActivityPriceDetailsRS> GetActivityPriceDetailsWithHttpInfo (string authtoken, string key);
        /// <summary>
        /// Use this method to know which transfers are available and their prices
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Auth token provided by your partner, and possibly renewed by using the /commons/newtoken method</param>
        /// <param name="from">Transfer origin, as got in the getportfolio response (optional)</param>
        /// <param name="to">Transfer destination, as got in the getportfolio response (optional)</param>
        /// <param name="pax">Number of pax (optional)</param>
        /// <param name="ages">Pax ages. If not present we will assume they are adults (optional)</param>
        /// <param name="bikes">Number of bikes (optional)</param>
        /// <param name="golfs">Number of golf baggages (optional)</param>
        /// <param name="bigs">Number of big luggages not bikes neither golf baggages (optional)</param>
        /// <param name="wheelchairs">Number of wheel chairs (optional)</param>
        /// <param name="incomingdate">Locale date for the incoming side of the transfer, in YYYYMMDD format (optional)</param>
        /// <param name="outgoingdate">Locale date for the outgoing / return side of the transfer, in YYYYMMDD format (optional)</param>
        /// <returns>GetAvailableTransfersRS</returns>
        GetAvailableTransfersRS GetAvailabeTransfers (string authtoken, string from = null, string to = null, int? pax = null, List<int?> ages = null, int? bikes = null, int? golfs = null, int? bigs = null, int? wheelchairs = null, int? incomingdate = null, int? outgoingdate = null);

        /// <summary>
        /// Use this method to know which transfers are available and their prices
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Auth token provided by your partner, and possibly renewed by using the /commons/newtoken method</param>
        /// <param name="from">Transfer origin, as got in the getportfolio response (optional)</param>
        /// <param name="to">Transfer destination, as got in the getportfolio response (optional)</param>
        /// <param name="pax">Number of pax (optional)</param>
        /// <param name="ages">Pax ages. If not present we will assume they are adults (optional)</param>
        /// <param name="bikes">Number of bikes (optional)</param>
        /// <param name="golfs">Number of golf baggages (optional)</param>
        /// <param name="bigs">Number of big luggages not bikes neither golf baggages (optional)</param>
        /// <param name="wheelchairs">Number of wheel chairs (optional)</param>
        /// <param name="incomingdate">Locale date for the incoming side of the transfer, in YYYYMMDD format (optional)</param>
        /// <param name="outgoingdate">Locale date for the outgoing / return side of the transfer, in YYYYMMDD format (optional)</param>
        /// <returns>ApiResponse of GetAvailableTransfersRS</returns>
        ApiResponse<GetAvailableTransfersRS> GetAvailabeTransfersWithHttpInfo (string authtoken, string from = null, string to = null, int? pax = null, List<int?> ages = null, int? bikes = null, int? golfs = null, int? bigs = null, int? wheelchairs = null, int? incomingdate = null, int? outgoingdate = null);
        /// <summary>
        /// Get available activities
        /// </summary>
        /// <remarks>
        /// By passing a resort and holidays dates you get a list of the available activities
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Auth token provided by your partner, and possibly renewed by using the /commons/newtoken method</param>
        /// <param name="start">Holidays start date in YYYYMMDD format (optional)</param>
        /// <param name="end">Holidays end date in YYYYMMDD format (optional)</param>
        /// <param name="resourceid">Resort ID. You can get it from commons/getportfolio (optional)</param>
        /// <param name="pax">Number of pax (optional)</param>
        /// <param name="ages">Ages for the paxes. You can include just children ages. If not present all pax will be treated as adults (optional)</param>
        /// <returns>GetAvailableActivitiesRS</returns>
        GetAvailableActivitiesRS GetAvailableActivities (string authtoken, int? start = null, int? end = null, string resourceid = null, int? pax = null, List<int?> ages = null);

        /// <summary>
        /// Get available activities
        /// </summary>
        /// <remarks>
        /// By passing a resort and holidays dates you get a list of the available activities
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Auth token provided by your partner, and possibly renewed by using the /commons/newtoken method</param>
        /// <param name="start">Holidays start date in YYYYMMDD format (optional)</param>
        /// <param name="end">Holidays end date in YYYYMMDD format (optional)</param>
        /// <param name="resourceid">Resort ID. You can get it from commons/getportfolio (optional)</param>
        /// <param name="pax">Number of pax (optional)</param>
        /// <param name="ages">Ages for the paxes. You can include just children ages. If not present all pax will be treated as adults (optional)</param>
        /// <returns>ApiResponse of GetAvailableActivitiesRS</returns>
        ApiResponse<GetAvailableActivitiesRS> GetAvailableActivitiesWithHttpInfo (string authtoken, int? start = null, int? end = null, string resourceid = null, int? pax = null, List<int?> ages = null);
        /// <summary>
        /// Use this method to know which hotels are available and their prices
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Auth token provided by your partner, and possibly renewed by using the /commons/newtoken method</param>
        /// <param name="resorts">The list of resorts you are interested in (optional)</param>
        /// <param name="checkin">The locale checkin date in YYYYMMDD format (optional)</param>
        /// <param name="checkout">The locale checkout date in YYYYMMDD format (optional)</param>
        /// <param name="occupancies">List of occupancies you need (optional)</param>
        /// <param name="includestaticinfo">Set to true if you want the response to include static info (hotel description, main hotel image, ...). If false (default value) static info will not be included in order to make the response lighter (optional)</param>
        /// <returns>GetAvailableHotelsRS</returns>
        GetAvailableHotelsRS GetAvailableHotels (string authtoken, List<string> resorts = null, int? checkin = null, int? checkout = null, List<string> occupancies = null, bool? includestaticinfo = null);

        /// <summary>
        /// Use this method to know which hotels are available and their prices
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Auth token provided by your partner, and possibly renewed by using the /commons/newtoken method</param>
        /// <param name="resorts">The list of resorts you are interested in (optional)</param>
        /// <param name="checkin">The locale checkin date in YYYYMMDD format (optional)</param>
        /// <param name="checkout">The locale checkout date in YYYYMMDD format (optional)</param>
        /// <param name="occupancies">List of occupancies you need (optional)</param>
        /// <param name="includestaticinfo">Set to true if you want the response to include static info (hotel description, main hotel image, ...). If false (default value) static info will not be included in order to make the response lighter (optional)</param>
        /// <returns>ApiResponse of GetAvailableHotelsRS</returns>
        ApiResponse<GetAvailableHotelsRS> GetAvailableHotelsWithHttpInfo (string authtoken, List<string> resorts = null, int? checkin = null, int? checkout = null, List<string> occupancies = null, bool? includestaticinfo = null);
        /// <summary>
        /// Method to get a list of bookings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Auth token provided by your partner, and possibly renewed by using the /commons/newtoken method</param>
        /// <param name="confirmedfrom">Starting date you want service bookings confirmed from. In YYYYMMDD format (optional)</param>
        /// <param name="confirmedto">Ending date you want service bookings confirmed to. In YYYYMMDD format (optional)</param>
        /// <param name="startingfrom">Starting date you want service bookings starting from. In YYYYMMDD format (optional)</param>
        /// <param name="startingto">Ending date you want service bookings starting from. In YYYYMMDD format (optional)</param>
        /// <returns>GetBookingsRS</returns>
        GetBookingsRS GetBookings (string authtoken, int? confirmedfrom = null, int? confirmedto = null, int? startingfrom = null, int? startingto = null);

        /// <summary>
        /// Method to get a list of bookings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Auth token provided by your partner, and possibly renewed by using the /commons/newtoken method</param>
        /// <param name="confirmedfrom">Starting date you want service bookings confirmed from. In YYYYMMDD format (optional)</param>
        /// <param name="confirmedto">Ending date you want service bookings confirmed to. In YYYYMMDD format (optional)</param>
        /// <param name="startingfrom">Starting date you want service bookings starting from. In YYYYMMDD format (optional)</param>
        /// <param name="startingto">Ending date you want service bookings starting from. In YYYYMMDD format (optional)</param>
        /// <returns>ApiResponse of GetBookingsRS</returns>
        ApiResponse<GetBookingsRS> GetBookingsWithHttpInfo (string authtoken, int? confirmedfrom = null, int? confirmedto = null, int? startingfrom = null, int? startingto = null);
        /// <summary>
        /// Method to get a resource data sheet. E.g. descriptions, images, features
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Auth token provided by your partner, and possibly renewed by using the /commons/newtoken method</param>
        /// <param name="resourceid"></param>
        /// <returns>GetDataSheetRS</returns>
        GetDataSheetRS GetDataSheet (string authtoken, string resourceid);

        /// <summary>
        /// Method to get a resource data sheet. E.g. descriptions, images, features
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Auth token provided by your partner, and possibly renewed by using the /commons/newtoken method</param>
        /// <param name="resourceid"></param>
        /// <returns>ApiResponse of GetDataSheetRS</returns>
        ApiResponse<GetDataSheetRS> GetDataSheetWithHttpInfo (string authtoken, string resourceid);
        /// <summary>
        /// Use this method to know which hotels are you allowed to update. It provides the ids to be used by the channel manager
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Auth token provided by your partner, and possibly renewed by using the /commons/newtoken method</param>
        /// <returns>GetGrantedHotelsRS</returns>
        GetGrantedHotelsRS GetGrantedHotels (string authtoken);

        /// <summary>
        /// Use this method to know which hotels are you allowed to update. It provides the ids to be used by the channel manager
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Auth token provided by your partner, and possibly renewed by using the /commons/newtoken method</param>
        /// <returns>ApiResponse of GetGrantedHotelsRS</returns>
        ApiResponse<GetGrantedHotelsRS> GetGrantedHotelsWithHttpInfo (string authtoken);
        /// <summary>
        /// Use this methos to guess cancellation costs and important remarks regarding a price
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Auth token provided by your partner, and possibly renewed by using the /commons/newtoken method</param>
        /// <param name="key">The hotel price key, as provided in the /hotel/available step</param>
        /// <returns>GetHotelPriceDetailsRS</returns>
        GetHotelPriceDetailsRS GetHotelPriceDetails (string authtoken, string key);

        /// <summary>
        /// Use this methos to guess cancellation costs and important remarks regarding a price
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Auth token provided by your partner, and possibly renewed by using the /commons/newtoken method</param>
        /// <param name="key">The hotel price key, as provided in the /hotel/available step</param>
        /// <returns>ApiResponse of GetHotelPriceDetailsRS</returns>
        ApiResponse<GetHotelPriceDetailsRS> GetHotelPriceDetailsWithHttpInfo (string authtoken, string key);
        /// <summary>
        /// Method to get the whole product tree
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Auth token provided by your partner, and possibly renewed by using the /commons/newtoken method</param>
        /// <returns>GetPortfolioRS</returns>
        GetPortfolioRS GetPortfolio (string authtoken);

        /// <summary>
        /// Method to get the whole product tree
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Auth token provided by your partner, and possibly renewed by using the /commons/newtoken method</param>
        /// <returns>ApiResponse of GetPortfolioRS</returns>
        ApiResponse<GetPortfolioRS> GetPortfolioWithHttpInfo (string authtoken);
        /// <summary>
        /// Use this method to download the list of hotel bookings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Auth token provided by your partner, and possibly renewed by using the /commons/newtoken method</param>
        /// <param name="confirmedfrom">Starting date you want service bookings confirmed from. In YYYYMMDD format (optional)</param>
        /// <param name="confirmedto">Ending date you want service bookings confirmed to. In YYYYMMDD format (optional)</param>
        /// <param name="startingfrom">Starting date you want service bookings starting from. In YYYYMMDD format (optional)</param>
        /// <param name="startingto">Ending date you want service bookings starting from. In YYYYMMDD format (optional)</param>
        /// <returns>GetRoomingListRS</returns>
        GetRoomingListRS GetRoomingList (string authtoken, int? confirmedfrom = null, int? confirmedto = null, int? startingfrom = null, int? startingto = null);

        /// <summary>
        /// Use this method to download the list of hotel bookings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Auth token provided by your partner, and possibly renewed by using the /commons/newtoken method</param>
        /// <param name="confirmedfrom">Starting date you want service bookings confirmed from. In YYYYMMDD format (optional)</param>
        /// <param name="confirmedto">Ending date you want service bookings confirmed to. In YYYYMMDD format (optional)</param>
        /// <param name="startingfrom">Starting date you want service bookings starting from. In YYYYMMDD format (optional)</param>
        /// <param name="startingto">Ending date you want service bookings starting from. In YYYYMMDD format (optional)</param>
        /// <returns>ApiResponse of GetRoomingListRS</returns>
        ApiResponse<GetRoomingListRS> GetRoomingListWithHttpInfo (string authtoken, int? confirmedfrom = null, int? confirmedto = null, int? startingfrom = null, int? startingto = null);
        /// <summary>
        /// Use this method to get or renew your authentication token
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Auth token provided by your partner, and possibly renewed by using the /commons/newtoken method</param>
        /// <param name="user"> (optional)</param>
        /// <returns>string</returns>
        string GetToken (string authtoken, string user = null);

        /// <summary>
        /// Use this method to get or renew your authentication token
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Auth token provided by your partner, and possibly renewed by using the /commons/newtoken method</param>
        /// <param name="user"> (optional)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> GetTokenWithHttpInfo (string authtoken, string user = null);
        /// <summary>
        /// Use this method to guess cancellation costs and important remarks
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Auth token provided by your partner, and possibly renewed by using the /commons/newtoken method</param>
        /// <param name="key">The hotel price key, as provided in the /transfer/available step</param>
        /// <returns>GetTransferPriceDetailsRS</returns>
        GetTransferPriceDetailsRS GetTransferPriceDetails (string authtoken, string key);

        /// <summary>
        /// Use this method to guess cancellation costs and important remarks
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Auth token provided by your partner, and possibly renewed by using the /commons/newtoken method</param>
        /// <param name="key">The hotel price key, as provided in the /transfer/available step</param>
        /// <returns>ApiResponse of GetTransferPriceDetailsRS</returns>
        ApiResponse<GetTransferPriceDetailsRS> GetTransferPriceDetailsWithHttpInfo (string authtoken, string key);
        /// <summary>
        /// Use this method to update hotel inventory
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Auth token provided by your partner, and possibly renewed by using the /commons/newtoken method</param>
        /// <param name="body"> (optional)</param>
        /// <returns>UpdateRS</returns>
        UpdateRS Update (string authtoken, UpdateRQ body = null);

        /// <summary>
        /// Use this method to update hotel inventory
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Auth token provided by your partner, and possibly renewed by using the /commons/newtoken method</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of UpdateRS</returns>
        ApiResponse<UpdateRS> UpdateWithHttpInfo (string authtoken, UpdateRQ body = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Book an activity
        /// </summary>
        /// <remarks>
        /// Here you can confirm an activity booking. You must provide a price key and some additional data (lead name, comments, ...)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Auth token provided by your partner, and possibly renewed by using the /commons/newtoken method</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of BookActivityRS</returns>
        System.Threading.Tasks.Task<BookActivityRS> BookActivityAsync (string authtoken, BookActivityRQ body = null);

        /// <summary>
        /// Book an activity
        /// </summary>
        /// <remarks>
        /// Here you can confirm an activity booking. You must provide a price key and some additional data (lead name, comments, ...)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Auth token provided by your partner, and possibly renewed by using the /commons/newtoken method</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (BookActivityRS)</returns>
        System.Threading.Tasks.Task<ApiResponse<BookActivityRS>> BookActivityAsyncWithHttpInfo (string authtoken, BookActivityRQ body = null);
        /// <summary>
        /// Use this method to confirm a hotel service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Auth token provided by your partner, and possibly renewed by using the /commons/newtoken method</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of BookHotelRS</returns>
        System.Threading.Tasks.Task<BookHotelRS> BookHotelAsync (string authtoken, BookHotelRQ body = null);

        /// <summary>
        /// Use this method to confirm a hotel service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Auth token provided by your partner, and possibly renewed by using the /commons/newtoken method</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (BookHotelRS)</returns>
        System.Threading.Tasks.Task<ApiResponse<BookHotelRS>> BookHotelAsyncWithHttpInfo (string authtoken, BookHotelRQ body = null);
        /// <summary>
        /// Use this method to confirm a transfer service booking
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Auth token provided by your partner, and possibly renewed by using the /commons/newtoken method</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of BookTransferRS</returns>
        System.Threading.Tasks.Task<BookTransferRS> BookTransferAsync (string authtoken, BookTransferRQ body = null);

        /// <summary>
        /// Use this method to confirm a transfer service booking
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Auth token provided by your partner, and possibly renewed by using the /commons/newtoken method</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (BookTransferRS)</returns>
        System.Threading.Tasks.Task<ApiResponse<BookTransferRS>> BookTransferAsyncWithHttpInfo (string authtoken, BookTransferRQ body = null);
        /// <summary>
        /// Method to cancel a service booking
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Auth token provided by your partner, and possibly renewed by using the /commons/newtoken method</param>
        /// <param name="bookingid">The service booking id you want to cancel</param>
        /// <returns>Task of CancelBookingRS</returns>
        System.Threading.Tasks.Task<CancelBookingRS> CancelBookingAsync (string authtoken, string bookingid);

        /// <summary>
        /// Method to cancel a service booking
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Auth token provided by your partner, and possibly renewed by using the /commons/newtoken method</param>
        /// <param name="bookingid">The service booking id you want to cancel</param>
        /// <returns>Task of ApiResponse (CancelBookingRS)</returns>
        System.Threading.Tasks.Task<ApiResponse<CancelBookingRS>> CancelBookingAsyncWithHttpInfo (string authtoken, string bookingid);
        /// <summary>
        /// Use this method to confirm or reject services
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Auth token provided by your partner, and possibly renewed by using the /commons/newtoken method</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ConfirmServicesRS</returns>
        System.Threading.Tasks.Task<ConfirmServicesRS> ConfirmServicesAsync (string authtoken, ConfirmServicesRQ body = null);

        /// <summary>
        /// Use this method to confirm or reject services
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Auth token provided by your partner, and possibly renewed by using the /commons/newtoken method</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (ConfirmServicesRS)</returns>
        System.Threading.Tasks.Task<ApiResponse<ConfirmServicesRS>> ConfirmServicesAsyncWithHttpInfo (string authtoken, ConfirmServicesRQ body = null);
        /// <summary>
        /// Get extra info
        /// </summary>
        /// <remarks>
        /// By passing a price key you get extra info
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Auth token provided by your partner, and possibly renewed by using the /commons/newtoken method</param>
        /// <param name="key">The activity price key, as provided in the /activity/available step</param>
        /// <returns>Task of GetActivityPriceDetailsRS</returns>
        System.Threading.Tasks.Task<GetActivityPriceDetailsRS> GetActivityPriceDetailsAsync (string authtoken, string key);

        /// <summary>
        /// Get extra info
        /// </summary>
        /// <remarks>
        /// By passing a price key you get extra info
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Auth token provided by your partner, and possibly renewed by using the /commons/newtoken method</param>
        /// <param name="key">The activity price key, as provided in the /activity/available step</param>
        /// <returns>Task of ApiResponse (GetActivityPriceDetailsRS)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetActivityPriceDetailsRS>> GetActivityPriceDetailsAsyncWithHttpInfo (string authtoken, string key);
        /// <summary>
        /// Use this method to know which transfers are available and their prices
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Auth token provided by your partner, and possibly renewed by using the /commons/newtoken method</param>
        /// <param name="from">Transfer origin, as got in the getportfolio response (optional)</param>
        /// <param name="to">Transfer destination, as got in the getportfolio response (optional)</param>
        /// <param name="pax">Number of pax (optional)</param>
        /// <param name="ages">Pax ages. If not present we will assume they are adults (optional)</param>
        /// <param name="bikes">Number of bikes (optional)</param>
        /// <param name="golfs">Number of golf baggages (optional)</param>
        /// <param name="bigs">Number of big luggages not bikes neither golf baggages (optional)</param>
        /// <param name="wheelchairs">Number of wheel chairs (optional)</param>
        /// <param name="incomingdate">Locale date for the incoming side of the transfer, in YYYYMMDD format (optional)</param>
        /// <param name="outgoingdate">Locale date for the outgoing / return side of the transfer, in YYYYMMDD format (optional)</param>
        /// <returns>Task of GetAvailableTransfersRS</returns>
        System.Threading.Tasks.Task<GetAvailableTransfersRS> GetAvailabeTransfersAsync (string authtoken, string from = null, string to = null, int? pax = null, List<int?> ages = null, int? bikes = null, int? golfs = null, int? bigs = null, int? wheelchairs = null, int? incomingdate = null, int? outgoingdate = null);

        /// <summary>
        /// Use this method to know which transfers are available and their prices
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Auth token provided by your partner, and possibly renewed by using the /commons/newtoken method</param>
        /// <param name="from">Transfer origin, as got in the getportfolio response (optional)</param>
        /// <param name="to">Transfer destination, as got in the getportfolio response (optional)</param>
        /// <param name="pax">Number of pax (optional)</param>
        /// <param name="ages">Pax ages. If not present we will assume they are adults (optional)</param>
        /// <param name="bikes">Number of bikes (optional)</param>
        /// <param name="golfs">Number of golf baggages (optional)</param>
        /// <param name="bigs">Number of big luggages not bikes neither golf baggages (optional)</param>
        /// <param name="wheelchairs">Number of wheel chairs (optional)</param>
        /// <param name="incomingdate">Locale date for the incoming side of the transfer, in YYYYMMDD format (optional)</param>
        /// <param name="outgoingdate">Locale date for the outgoing / return side of the transfer, in YYYYMMDD format (optional)</param>
        /// <returns>Task of ApiResponse (GetAvailableTransfersRS)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetAvailableTransfersRS>> GetAvailabeTransfersAsyncWithHttpInfo (string authtoken, string from = null, string to = null, int? pax = null, List<int?> ages = null, int? bikes = null, int? golfs = null, int? bigs = null, int? wheelchairs = null, int? incomingdate = null, int? outgoingdate = null);
        /// <summary>
        /// Get available activities
        /// </summary>
        /// <remarks>
        /// By passing a resort and holidays dates you get a list of the available activities
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Auth token provided by your partner, and possibly renewed by using the /commons/newtoken method</param>
        /// <param name="start">Holidays start date in YYYYMMDD format (optional)</param>
        /// <param name="end">Holidays end date in YYYYMMDD format (optional)</param>
        /// <param name="resourceid">Resort ID. You can get it from commons/getportfolio (optional)</param>
        /// <param name="pax">Number of pax (optional)</param>
        /// <param name="ages">Ages for the paxes. You can include just children ages. If not present all pax will be treated as adults (optional)</param>
        /// <returns>Task of GetAvailableActivitiesRS</returns>
        System.Threading.Tasks.Task<GetAvailableActivitiesRS> GetAvailableActivitiesAsync (string authtoken, int? start = null, int? end = null, string resourceid = null, int? pax = null, List<int?> ages = null);

        /// <summary>
        /// Get available activities
        /// </summary>
        /// <remarks>
        /// By passing a resort and holidays dates you get a list of the available activities
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Auth token provided by your partner, and possibly renewed by using the /commons/newtoken method</param>
        /// <param name="start">Holidays start date in YYYYMMDD format (optional)</param>
        /// <param name="end">Holidays end date in YYYYMMDD format (optional)</param>
        /// <param name="resourceid">Resort ID. You can get it from commons/getportfolio (optional)</param>
        /// <param name="pax">Number of pax (optional)</param>
        /// <param name="ages">Ages for the paxes. You can include just children ages. If not present all pax will be treated as adults (optional)</param>
        /// <returns>Task of ApiResponse (GetAvailableActivitiesRS)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetAvailableActivitiesRS>> GetAvailableActivitiesAsyncWithHttpInfo (string authtoken, int? start = null, int? end = null, string resourceid = null, int? pax = null, List<int?> ages = null);
        /// <summary>
        /// Use this method to know which hotels are available and their prices
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Auth token provided by your partner, and possibly renewed by using the /commons/newtoken method</param>
        /// <param name="resorts">The list of resorts you are interested in (optional)</param>
        /// <param name="checkin">The locale checkin date in YYYYMMDD format (optional)</param>
        /// <param name="checkout">The locale checkout date in YYYYMMDD format (optional)</param>
        /// <param name="occupancies">List of occupancies you need (optional)</param>
        /// <param name="includestaticinfo">Set to true if you want the response to include static info (hotel description, main hotel image, ...). If false (default value) static info will not be included in order to make the response lighter (optional)</param>
        /// <returns>Task of GetAvailableHotelsRS</returns>
        System.Threading.Tasks.Task<GetAvailableHotelsRS> GetAvailableHotelsAsync (string authtoken, List<string> resorts = null, int? checkin = null, int? checkout = null, List<string> occupancies = null, bool? includestaticinfo = null);

        /// <summary>
        /// Use this method to know which hotels are available and their prices
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Auth token provided by your partner, and possibly renewed by using the /commons/newtoken method</param>
        /// <param name="resorts">The list of resorts you are interested in (optional)</param>
        /// <param name="checkin">The locale checkin date in YYYYMMDD format (optional)</param>
        /// <param name="checkout">The locale checkout date in YYYYMMDD format (optional)</param>
        /// <param name="occupancies">List of occupancies you need (optional)</param>
        /// <param name="includestaticinfo">Set to true if you want the response to include static info (hotel description, main hotel image, ...). If false (default value) static info will not be included in order to make the response lighter (optional)</param>
        /// <returns>Task of ApiResponse (GetAvailableHotelsRS)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetAvailableHotelsRS>> GetAvailableHotelsAsyncWithHttpInfo (string authtoken, List<string> resorts = null, int? checkin = null, int? checkout = null, List<string> occupancies = null, bool? includestaticinfo = null);
        /// <summary>
        /// Method to get a list of bookings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Auth token provided by your partner, and possibly renewed by using the /commons/newtoken method</param>
        /// <param name="confirmedfrom">Starting date you want service bookings confirmed from. In YYYYMMDD format (optional)</param>
        /// <param name="confirmedto">Ending date you want service bookings confirmed to. In YYYYMMDD format (optional)</param>
        /// <param name="startingfrom">Starting date you want service bookings starting from. In YYYYMMDD format (optional)</param>
        /// <param name="startingto">Ending date you want service bookings starting from. In YYYYMMDD format (optional)</param>
        /// <returns>Task of GetBookingsRS</returns>
        System.Threading.Tasks.Task<GetBookingsRS> GetBookingsAsync (string authtoken, int? confirmedfrom = null, int? confirmedto = null, int? startingfrom = null, int? startingto = null);

        /// <summary>
        /// Method to get a list of bookings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Auth token provided by your partner, and possibly renewed by using the /commons/newtoken method</param>
        /// <param name="confirmedfrom">Starting date you want service bookings confirmed from. In YYYYMMDD format (optional)</param>
        /// <param name="confirmedto">Ending date you want service bookings confirmed to. In YYYYMMDD format (optional)</param>
        /// <param name="startingfrom">Starting date you want service bookings starting from. In YYYYMMDD format (optional)</param>
        /// <param name="startingto">Ending date you want service bookings starting from. In YYYYMMDD format (optional)</param>
        /// <returns>Task of ApiResponse (GetBookingsRS)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetBookingsRS>> GetBookingsAsyncWithHttpInfo (string authtoken, int? confirmedfrom = null, int? confirmedto = null, int? startingfrom = null, int? startingto = null);
        /// <summary>
        /// Method to get a resource data sheet. E.g. descriptions, images, features
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Auth token provided by your partner, and possibly renewed by using the /commons/newtoken method</param>
        /// <param name="resourceid"></param>
        /// <returns>Task of GetDataSheetRS</returns>
        System.Threading.Tasks.Task<GetDataSheetRS> GetDataSheetAsync (string authtoken, string resourceid);

        /// <summary>
        /// Method to get a resource data sheet. E.g. descriptions, images, features
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Auth token provided by your partner, and possibly renewed by using the /commons/newtoken method</param>
        /// <param name="resourceid"></param>
        /// <returns>Task of ApiResponse (GetDataSheetRS)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetDataSheetRS>> GetDataSheetAsyncWithHttpInfo (string authtoken, string resourceid);
        /// <summary>
        /// Use this method to know which hotels are you allowed to update. It provides the ids to be used by the channel manager
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Auth token provided by your partner, and possibly renewed by using the /commons/newtoken method</param>
        /// <returns>Task of GetGrantedHotelsRS</returns>
        System.Threading.Tasks.Task<GetGrantedHotelsRS> GetGrantedHotelsAsync (string authtoken);

        /// <summary>
        /// Use this method to know which hotels are you allowed to update. It provides the ids to be used by the channel manager
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Auth token provided by your partner, and possibly renewed by using the /commons/newtoken method</param>
        /// <returns>Task of ApiResponse (GetGrantedHotelsRS)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetGrantedHotelsRS>> GetGrantedHotelsAsyncWithHttpInfo (string authtoken);
        /// <summary>
        /// Use this methos to guess cancellation costs and important remarks regarding a price
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Auth token provided by your partner, and possibly renewed by using the /commons/newtoken method</param>
        /// <param name="key">The hotel price key, as provided in the /hotel/available step</param>
        /// <returns>Task of GetHotelPriceDetailsRS</returns>
        System.Threading.Tasks.Task<GetHotelPriceDetailsRS> GetHotelPriceDetailsAsync (string authtoken, string key);

        /// <summary>
        /// Use this methos to guess cancellation costs and important remarks regarding a price
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Auth token provided by your partner, and possibly renewed by using the /commons/newtoken method</param>
        /// <param name="key">The hotel price key, as provided in the /hotel/available step</param>
        /// <returns>Task of ApiResponse (GetHotelPriceDetailsRS)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetHotelPriceDetailsRS>> GetHotelPriceDetailsAsyncWithHttpInfo (string authtoken, string key);
        /// <summary>
        /// Method to get the whole product tree
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Auth token provided by your partner, and possibly renewed by using the /commons/newtoken method</param>
        /// <returns>Task of GetPortfolioRS</returns>
        System.Threading.Tasks.Task<GetPortfolioRS> GetPortfolioAsync (string authtoken);

        /// <summary>
        /// Method to get the whole product tree
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Auth token provided by your partner, and possibly renewed by using the /commons/newtoken method</param>
        /// <returns>Task of ApiResponse (GetPortfolioRS)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetPortfolioRS>> GetPortfolioAsyncWithHttpInfo (string authtoken);
        /// <summary>
        /// Use this method to download the list of hotel bookings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Auth token provided by your partner, and possibly renewed by using the /commons/newtoken method</param>
        /// <param name="confirmedfrom">Starting date you want service bookings confirmed from. In YYYYMMDD format (optional)</param>
        /// <param name="confirmedto">Ending date you want service bookings confirmed to. In YYYYMMDD format (optional)</param>
        /// <param name="startingfrom">Starting date you want service bookings starting from. In YYYYMMDD format (optional)</param>
        /// <param name="startingto">Ending date you want service bookings starting from. In YYYYMMDD format (optional)</param>
        /// <returns>Task of GetRoomingListRS</returns>
        System.Threading.Tasks.Task<GetRoomingListRS> GetRoomingListAsync (string authtoken, int? confirmedfrom = null, int? confirmedto = null, int? startingfrom = null, int? startingto = null);

        /// <summary>
        /// Use this method to download the list of hotel bookings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Auth token provided by your partner, and possibly renewed by using the /commons/newtoken method</param>
        /// <param name="confirmedfrom">Starting date you want service bookings confirmed from. In YYYYMMDD format (optional)</param>
        /// <param name="confirmedto">Ending date you want service bookings confirmed to. In YYYYMMDD format (optional)</param>
        /// <param name="startingfrom">Starting date you want service bookings starting from. In YYYYMMDD format (optional)</param>
        /// <param name="startingto">Ending date you want service bookings starting from. In YYYYMMDD format (optional)</param>
        /// <returns>Task of ApiResponse (GetRoomingListRS)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetRoomingListRS>> GetRoomingListAsyncWithHttpInfo (string authtoken, int? confirmedfrom = null, int? confirmedto = null, int? startingfrom = null, int? startingto = null);
        /// <summary>
        /// Use this method to get or renew your authentication token
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Auth token provided by your partner, and possibly renewed by using the /commons/newtoken method</param>
        /// <param name="user"> (optional)</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> GetTokenAsync (string authtoken, string user = null);

        /// <summary>
        /// Use this method to get or renew your authentication token
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Auth token provided by your partner, and possibly renewed by using the /commons/newtoken method</param>
        /// <param name="user"> (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> GetTokenAsyncWithHttpInfo (string authtoken, string user = null);
        /// <summary>
        /// Use this method to guess cancellation costs and important remarks
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Auth token provided by your partner, and possibly renewed by using the /commons/newtoken method</param>
        /// <param name="key">The hotel price key, as provided in the /transfer/available step</param>
        /// <returns>Task of GetTransferPriceDetailsRS</returns>
        System.Threading.Tasks.Task<GetTransferPriceDetailsRS> GetTransferPriceDetailsAsync (string authtoken, string key);

        /// <summary>
        /// Use this method to guess cancellation costs and important remarks
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Auth token provided by your partner, and possibly renewed by using the /commons/newtoken method</param>
        /// <param name="key">The hotel price key, as provided in the /transfer/available step</param>
        /// <returns>Task of ApiResponse (GetTransferPriceDetailsRS)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetTransferPriceDetailsRS>> GetTransferPriceDetailsAsyncWithHttpInfo (string authtoken, string key);
        /// <summary>
        /// Use this method to update hotel inventory
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Auth token provided by your partner, and possibly renewed by using the /commons/newtoken method</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of UpdateRS</returns>
        System.Threading.Tasks.Task<UpdateRS> UpdateAsync (string authtoken, UpdateRQ body = null);

        /// <summary>
        /// Use this method to update hotel inventory
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Auth token provided by your partner, and possibly renewed by using the /commons/newtoken method</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (UpdateRS)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdateRS>> UpdateAsyncWithHttpInfo (string authtoken, UpdateRQ body = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DefaultApi : IDefaultApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DefaultApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DefaultApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Book an activity Here you can confirm an activity booking. You must provide a price key and some additional data (lead name, comments, ...)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Auth token provided by your partner, and possibly renewed by using the /commons/newtoken method</param>
        /// <param name="body"> (optional)</param>
        /// <returns>BookActivityRS</returns>
        public BookActivityRS BookActivity (string authtoken, BookActivityRQ body = null)
        {
             ApiResponse<BookActivityRS> localVarResponse = BookActivityWithHttpInfo(authtoken, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Book an activity Here you can confirm an activity booking. You must provide a price key and some additional data (lead name, comments, ...)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Auth token provided by your partner, and possibly renewed by using the /commons/newtoken method</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of BookActivityRS</returns>
        public ApiResponse< BookActivityRS > BookActivityWithHttpInfo (string authtoken, BookActivityRQ body = null)
        {
            // verify the required parameter 'authtoken' is set
            if (authtoken == null)
                throw new ApiException(400, "Missing required parameter 'authtoken' when calling DefaultApi->BookActivity");

            var localVarPath = "/{authtoken}/activity/booking";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (authtoken != null) localVarPathParams.Add("authtoken", Configuration.ApiClient.ParameterToString(authtoken)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BookActivity", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BookActivityRS>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BookActivityRS) Configuration.ApiClient.Deserialize(localVarResponse, typeof(BookActivityRS)));
            
        }

        /// <summary>
        /// Book an activity Here you can confirm an activity booking. You must provide a price key and some additional data (lead name, comments, ...)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Auth token provided by your partner, and possibly renewed by using the /commons/newtoken method</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of BookActivityRS</returns>
        public async System.Threading.Tasks.Task<BookActivityRS> BookActivityAsync (string authtoken, BookActivityRQ body = null)
        {
             ApiResponse<BookActivityRS> localVarResponse = await BookActivityAsyncWithHttpInfo(authtoken, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Book an activity Here you can confirm an activity booking. You must provide a price key and some additional data (lead name, comments, ...)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Auth token provided by your partner, and possibly renewed by using the /commons/newtoken method</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (BookActivityRS)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BookActivityRS>> BookActivityAsyncWithHttpInfo (string authtoken, BookActivityRQ body = null)
        {
            // verify the required parameter 'authtoken' is set
            if (authtoken == null)
                throw new ApiException(400, "Missing required parameter 'authtoken' when calling DefaultApi->BookActivity");

            var localVarPath = "/{authtoken}/activity/booking";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (authtoken != null) localVarPathParams.Add("authtoken", Configuration.ApiClient.ParameterToString(authtoken)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BookActivity", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BookActivityRS>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BookActivityRS) Configuration.ApiClient.Deserialize(localVarResponse, typeof(BookActivityRS)));
            
        }

        /// <summary>
        /// Use this method to confirm a hotel service 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Auth token provided by your partner, and possibly renewed by using the /commons/newtoken method</param>
        /// <param name="body"> (optional)</param>
        /// <returns>BookHotelRS</returns>
        public BookHotelRS BookHotel (string authtoken, BookHotelRQ body = null)
        {
             ApiResponse<BookHotelRS> localVarResponse = BookHotelWithHttpInfo(authtoken, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Use this method to confirm a hotel service 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Auth token provided by your partner, and possibly renewed by using the /commons/newtoken method</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of BookHotelRS</returns>
        public ApiResponse< BookHotelRS > BookHotelWithHttpInfo (string authtoken, BookHotelRQ body = null)
        {
            // verify the required parameter 'authtoken' is set
            if (authtoken == null)
                throw new ApiException(400, "Missing required parameter 'authtoken' when calling DefaultApi->BookHotel");

            var localVarPath = "/{authtoken}/hotel/booking";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (authtoken != null) localVarPathParams.Add("authtoken", Configuration.ApiClient.ParameterToString(authtoken)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BookHotel", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BookHotelRS>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BookHotelRS) Configuration.ApiClient.Deserialize(localVarResponse, typeof(BookHotelRS)));
            
        }

        /// <summary>
        /// Use this method to confirm a hotel service 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Auth token provided by your partner, and possibly renewed by using the /commons/newtoken method</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of BookHotelRS</returns>
        public async System.Threading.Tasks.Task<BookHotelRS> BookHotelAsync (string authtoken, BookHotelRQ body = null)
        {
             ApiResponse<BookHotelRS> localVarResponse = await BookHotelAsyncWithHttpInfo(authtoken, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Use this method to confirm a hotel service 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Auth token provided by your partner, and possibly renewed by using the /commons/newtoken method</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (BookHotelRS)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BookHotelRS>> BookHotelAsyncWithHttpInfo (string authtoken, BookHotelRQ body = null)
        {
            // verify the required parameter 'authtoken' is set
            if (authtoken == null)
                throw new ApiException(400, "Missing required parameter 'authtoken' when calling DefaultApi->BookHotel");

            var localVarPath = "/{authtoken}/hotel/booking";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (authtoken != null) localVarPathParams.Add("authtoken", Configuration.ApiClient.ParameterToString(authtoken)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BookHotel", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BookHotelRS>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BookHotelRS) Configuration.ApiClient.Deserialize(localVarResponse, typeof(BookHotelRS)));
            
        }

        /// <summary>
        /// Use this method to confirm a transfer service booking 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Auth token provided by your partner, and possibly renewed by using the /commons/newtoken method</param>
        /// <param name="body"> (optional)</param>
        /// <returns>BookTransferRS</returns>
        public BookTransferRS BookTransfer (string authtoken, BookTransferRQ body = null)
        {
             ApiResponse<BookTransferRS> localVarResponse = BookTransferWithHttpInfo(authtoken, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Use this method to confirm a transfer service booking 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Auth token provided by your partner, and possibly renewed by using the /commons/newtoken method</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of BookTransferRS</returns>
        public ApiResponse< BookTransferRS > BookTransferWithHttpInfo (string authtoken, BookTransferRQ body = null)
        {
            // verify the required parameter 'authtoken' is set
            if (authtoken == null)
                throw new ApiException(400, "Missing required parameter 'authtoken' when calling DefaultApi->BookTransfer");

            var localVarPath = "/{authtoken}/transfer/booking";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (authtoken != null) localVarPathParams.Add("authtoken", Configuration.ApiClient.ParameterToString(authtoken)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BookTransfer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BookTransferRS>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BookTransferRS) Configuration.ApiClient.Deserialize(localVarResponse, typeof(BookTransferRS)));
            
        }

        /// <summary>
        /// Use this method to confirm a transfer service booking 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Auth token provided by your partner, and possibly renewed by using the /commons/newtoken method</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of BookTransferRS</returns>
        public async System.Threading.Tasks.Task<BookTransferRS> BookTransferAsync (string authtoken, BookTransferRQ body = null)
        {
             ApiResponse<BookTransferRS> localVarResponse = await BookTransferAsyncWithHttpInfo(authtoken, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Use this method to confirm a transfer service booking 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Auth token provided by your partner, and possibly renewed by using the /commons/newtoken method</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (BookTransferRS)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BookTransferRS>> BookTransferAsyncWithHttpInfo (string authtoken, BookTransferRQ body = null)
        {
            // verify the required parameter 'authtoken' is set
            if (authtoken == null)
                throw new ApiException(400, "Missing required parameter 'authtoken' when calling DefaultApi->BookTransfer");

            var localVarPath = "/{authtoken}/transfer/booking";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (authtoken != null) localVarPathParams.Add("authtoken", Configuration.ApiClient.ParameterToString(authtoken)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BookTransfer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BookTransferRS>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BookTransferRS) Configuration.ApiClient.Deserialize(localVarResponse, typeof(BookTransferRS)));
            
        }

        /// <summary>
        /// Method to cancel a service booking 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Auth token provided by your partner, and possibly renewed by using the /commons/newtoken method</param>
        /// <param name="bookingid">The service booking id you want to cancel</param>
        /// <returns>CancelBookingRS</returns>
        public CancelBookingRS CancelBooking (string authtoken, string bookingid)
        {
             ApiResponse<CancelBookingRS> localVarResponse = CancelBookingWithHttpInfo(authtoken, bookingid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Method to cancel a service booking 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Auth token provided by your partner, and possibly renewed by using the /commons/newtoken method</param>
        /// <param name="bookingid">The service booking id you want to cancel</param>
        /// <returns>ApiResponse of CancelBookingRS</returns>
        public ApiResponse< CancelBookingRS > CancelBookingWithHttpInfo (string authtoken, string bookingid)
        {
            // verify the required parameter 'authtoken' is set
            if (authtoken == null)
                throw new ApiException(400, "Missing required parameter 'authtoken' when calling DefaultApi->CancelBooking");
            // verify the required parameter 'bookingid' is set
            if (bookingid == null)
                throw new ApiException(400, "Missing required parameter 'bookingid' when calling DefaultApi->CancelBooking");

            var localVarPath = "/{authtoken}/commons/booking/{bookingid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (authtoken != null) localVarPathParams.Add("authtoken", Configuration.ApiClient.ParameterToString(authtoken)); // path parameter
            if (bookingid != null) localVarPathParams.Add("bookingid", Configuration.ApiClient.ParameterToString(bookingid)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CancelBooking", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CancelBookingRS>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CancelBookingRS) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CancelBookingRS)));
            
        }

        /// <summary>
        /// Method to cancel a service booking 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Auth token provided by your partner, and possibly renewed by using the /commons/newtoken method</param>
        /// <param name="bookingid">The service booking id you want to cancel</param>
        /// <returns>Task of CancelBookingRS</returns>
        public async System.Threading.Tasks.Task<CancelBookingRS> CancelBookingAsync (string authtoken, string bookingid)
        {
             ApiResponse<CancelBookingRS> localVarResponse = await CancelBookingAsyncWithHttpInfo(authtoken, bookingid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Method to cancel a service booking 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Auth token provided by your partner, and possibly renewed by using the /commons/newtoken method</param>
        /// <param name="bookingid">The service booking id you want to cancel</param>
        /// <returns>Task of ApiResponse (CancelBookingRS)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CancelBookingRS>> CancelBookingAsyncWithHttpInfo (string authtoken, string bookingid)
        {
            // verify the required parameter 'authtoken' is set
            if (authtoken == null)
                throw new ApiException(400, "Missing required parameter 'authtoken' when calling DefaultApi->CancelBooking");
            // verify the required parameter 'bookingid' is set
            if (bookingid == null)
                throw new ApiException(400, "Missing required parameter 'bookingid' when calling DefaultApi->CancelBooking");

            var localVarPath = "/{authtoken}/commons/booking/{bookingid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (authtoken != null) localVarPathParams.Add("authtoken", Configuration.ApiClient.ParameterToString(authtoken)); // path parameter
            if (bookingid != null) localVarPathParams.Add("bookingid", Configuration.ApiClient.ParameterToString(bookingid)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CancelBooking", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CancelBookingRS>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CancelBookingRS) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CancelBookingRS)));
            
        }

        /// <summary>
        /// Use this method to confirm or reject services 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Auth token provided by your partner, and possibly renewed by using the /commons/newtoken method</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ConfirmServicesRS</returns>
        public ConfirmServicesRS ConfirmServices (string authtoken, ConfirmServicesRQ body = null)
        {
             ApiResponse<ConfirmServicesRS> localVarResponse = ConfirmServicesWithHttpInfo(authtoken, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Use this method to confirm or reject services 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Auth token provided by your partner, and possibly renewed by using the /commons/newtoken method</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ConfirmServicesRS</returns>
        public ApiResponse< ConfirmServicesRS > ConfirmServicesWithHttpInfo (string authtoken, ConfirmServicesRQ body = null)
        {
            // verify the required parameter 'authtoken' is set
            if (authtoken == null)
                throw new ApiException(400, "Missing required parameter 'authtoken' when calling DefaultApi->ConfirmServices");

            var localVarPath = "/{authtoken}/channel/confirm";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (authtoken != null) localVarPathParams.Add("authtoken", Configuration.ApiClient.ParameterToString(authtoken)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConfirmServices", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ConfirmServicesRS>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ConfirmServicesRS) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ConfirmServicesRS)));
            
        }

        /// <summary>
        /// Use this method to confirm or reject services 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Auth token provided by your partner, and possibly renewed by using the /commons/newtoken method</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ConfirmServicesRS</returns>
        public async System.Threading.Tasks.Task<ConfirmServicesRS> ConfirmServicesAsync (string authtoken, ConfirmServicesRQ body = null)
        {
             ApiResponse<ConfirmServicesRS> localVarResponse = await ConfirmServicesAsyncWithHttpInfo(authtoken, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Use this method to confirm or reject services 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Auth token provided by your partner, and possibly renewed by using the /commons/newtoken method</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (ConfirmServicesRS)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ConfirmServicesRS>> ConfirmServicesAsyncWithHttpInfo (string authtoken, ConfirmServicesRQ body = null)
        {
            // verify the required parameter 'authtoken' is set
            if (authtoken == null)
                throw new ApiException(400, "Missing required parameter 'authtoken' when calling DefaultApi->ConfirmServices");

            var localVarPath = "/{authtoken}/channel/confirm";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (authtoken != null) localVarPathParams.Add("authtoken", Configuration.ApiClient.ParameterToString(authtoken)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConfirmServices", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ConfirmServicesRS>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ConfirmServicesRS) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ConfirmServicesRS)));
            
        }

        /// <summary>
        /// Get extra info By passing a price key you get extra info
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Auth token provided by your partner, and possibly renewed by using the /commons/newtoken method</param>
        /// <param name="key">The activity price key, as provided in the /activity/available step</param>
        /// <returns>GetActivityPriceDetailsRS</returns>
        public GetActivityPriceDetailsRS GetActivityPriceDetails (string authtoken, string key)
        {
             ApiResponse<GetActivityPriceDetailsRS> localVarResponse = GetActivityPriceDetailsWithHttpInfo(authtoken, key);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get extra info By passing a price key you get extra info
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Auth token provided by your partner, and possibly renewed by using the /commons/newtoken method</param>
        /// <param name="key">The activity price key, as provided in the /activity/available step</param>
        /// <returns>ApiResponse of GetActivityPriceDetailsRS</returns>
        public ApiResponse< GetActivityPriceDetailsRS > GetActivityPriceDetailsWithHttpInfo (string authtoken, string key)
        {
            // verify the required parameter 'authtoken' is set
            if (authtoken == null)
                throw new ApiException(400, "Missing required parameter 'authtoken' when calling DefaultApi->GetActivityPriceDetails");
            // verify the required parameter 'key' is set
            if (key == null)
                throw new ApiException(400, "Missing required parameter 'key' when calling DefaultApi->GetActivityPriceDetails");

            var localVarPath = "/{authtoken}/activity/pricedetails/{key}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (authtoken != null) localVarPathParams.Add("authtoken", Configuration.ApiClient.ParameterToString(authtoken)); // path parameter
            if (key != null) localVarPathParams.Add("key", Configuration.ApiClient.ParameterToString(key)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetActivityPriceDetails", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetActivityPriceDetailsRS>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetActivityPriceDetailsRS) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetActivityPriceDetailsRS)));
            
        }

        /// <summary>
        /// Get extra info By passing a price key you get extra info
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Auth token provided by your partner, and possibly renewed by using the /commons/newtoken method</param>
        /// <param name="key">The activity price key, as provided in the /activity/available step</param>
        /// <returns>Task of GetActivityPriceDetailsRS</returns>
        public async System.Threading.Tasks.Task<GetActivityPriceDetailsRS> GetActivityPriceDetailsAsync (string authtoken, string key)
        {
             ApiResponse<GetActivityPriceDetailsRS> localVarResponse = await GetActivityPriceDetailsAsyncWithHttpInfo(authtoken, key);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get extra info By passing a price key you get extra info
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Auth token provided by your partner, and possibly renewed by using the /commons/newtoken method</param>
        /// <param name="key">The activity price key, as provided in the /activity/available step</param>
        /// <returns>Task of ApiResponse (GetActivityPriceDetailsRS)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetActivityPriceDetailsRS>> GetActivityPriceDetailsAsyncWithHttpInfo (string authtoken, string key)
        {
            // verify the required parameter 'authtoken' is set
            if (authtoken == null)
                throw new ApiException(400, "Missing required parameter 'authtoken' when calling DefaultApi->GetActivityPriceDetails");
            // verify the required parameter 'key' is set
            if (key == null)
                throw new ApiException(400, "Missing required parameter 'key' when calling DefaultApi->GetActivityPriceDetails");

            var localVarPath = "/{authtoken}/activity/pricedetails/{key}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (authtoken != null) localVarPathParams.Add("authtoken", Configuration.ApiClient.ParameterToString(authtoken)); // path parameter
            if (key != null) localVarPathParams.Add("key", Configuration.ApiClient.ParameterToString(key)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetActivityPriceDetails", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetActivityPriceDetailsRS>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetActivityPriceDetailsRS) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetActivityPriceDetailsRS)));
            
        }

        /// <summary>
        /// Use this method to know which transfers are available and their prices 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Auth token provided by your partner, and possibly renewed by using the /commons/newtoken method</param>
        /// <param name="from">Transfer origin, as got in the getportfolio response (optional)</param>
        /// <param name="to">Transfer destination, as got in the getportfolio response (optional)</param>
        /// <param name="pax">Number of pax (optional)</param>
        /// <param name="ages">Pax ages. If not present we will assume they are adults (optional)</param>
        /// <param name="bikes">Number of bikes (optional)</param>
        /// <param name="golfs">Number of golf baggages (optional)</param>
        /// <param name="bigs">Number of big luggages not bikes neither golf baggages (optional)</param>
        /// <param name="wheelchairs">Number of wheel chairs (optional)</param>
        /// <param name="incomingdate">Locale date for the incoming side of the transfer, in YYYYMMDD format (optional)</param>
        /// <param name="outgoingdate">Locale date for the outgoing / return side of the transfer, in YYYYMMDD format (optional)</param>
        /// <returns>GetAvailableTransfersRS</returns>
        public GetAvailableTransfersRS GetAvailabeTransfers (string authtoken, string from = null, string to = null, int? pax = null, List<int?> ages = null, int? bikes = null, int? golfs = null, int? bigs = null, int? wheelchairs = null, int? incomingdate = null, int? outgoingdate = null)
        {
             ApiResponse<GetAvailableTransfersRS> localVarResponse = GetAvailabeTransfersWithHttpInfo(authtoken, from, to, pax, ages, bikes, golfs, bigs, wheelchairs, incomingdate, outgoingdate);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Use this method to know which transfers are available and their prices 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Auth token provided by your partner, and possibly renewed by using the /commons/newtoken method</param>
        /// <param name="from">Transfer origin, as got in the getportfolio response (optional)</param>
        /// <param name="to">Transfer destination, as got in the getportfolio response (optional)</param>
        /// <param name="pax">Number of pax (optional)</param>
        /// <param name="ages">Pax ages. If not present we will assume they are adults (optional)</param>
        /// <param name="bikes">Number of bikes (optional)</param>
        /// <param name="golfs">Number of golf baggages (optional)</param>
        /// <param name="bigs">Number of big luggages not bikes neither golf baggages (optional)</param>
        /// <param name="wheelchairs">Number of wheel chairs (optional)</param>
        /// <param name="incomingdate">Locale date for the incoming side of the transfer, in YYYYMMDD format (optional)</param>
        /// <param name="outgoingdate">Locale date for the outgoing / return side of the transfer, in YYYYMMDD format (optional)</param>
        /// <returns>ApiResponse of GetAvailableTransfersRS</returns>
        public ApiResponse< GetAvailableTransfersRS > GetAvailabeTransfersWithHttpInfo (string authtoken, string from = null, string to = null, int? pax = null, List<int?> ages = null, int? bikes = null, int? golfs = null, int? bigs = null, int? wheelchairs = null, int? incomingdate = null, int? outgoingdate = null)
        {
            // verify the required parameter 'authtoken' is set
            if (authtoken == null)
                throw new ApiException(400, "Missing required parameter 'authtoken' when calling DefaultApi->GetAvailabeTransfers");

            var localVarPath = "/{authtoken}/transfer/available";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (authtoken != null) localVarPathParams.Add("authtoken", Configuration.ApiClient.ParameterToString(authtoken)); // path parameter
            if (from != null) localVarQueryParams.Add("from", Configuration.ApiClient.ParameterToString(from)); // query parameter
            if (to != null) localVarQueryParams.Add("to", Configuration.ApiClient.ParameterToString(to)); // query parameter
            if (pax != null) localVarQueryParams.Add("pax", Configuration.ApiClient.ParameterToString(pax)); // query parameter
            if (ages != null) localVarQueryParams.Add("ages", Configuration.ApiClient.ParameterToString(ages)); // query parameter
            if (bikes != null) localVarQueryParams.Add("bikes", Configuration.ApiClient.ParameterToString(bikes)); // query parameter
            if (golfs != null) localVarQueryParams.Add("golfs", Configuration.ApiClient.ParameterToString(golfs)); // query parameter
            if (bigs != null) localVarQueryParams.Add("bigs", Configuration.ApiClient.ParameterToString(bigs)); // query parameter
            if (wheelchairs != null) localVarQueryParams.Add("wheelchairs", Configuration.ApiClient.ParameterToString(wheelchairs)); // query parameter
            if (incomingdate != null) localVarQueryParams.Add("incomingdate", Configuration.ApiClient.ParameterToString(incomingdate)); // query parameter
            if (outgoingdate != null) localVarQueryParams.Add("outgoingdate", Configuration.ApiClient.ParameterToString(outgoingdate)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAvailabeTransfers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetAvailableTransfersRS>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetAvailableTransfersRS) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetAvailableTransfersRS)));
            
        }

        /// <summary>
        /// Use this method to know which transfers are available and their prices 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Auth token provided by your partner, and possibly renewed by using the /commons/newtoken method</param>
        /// <param name="from">Transfer origin, as got in the getportfolio response (optional)</param>
        /// <param name="to">Transfer destination, as got in the getportfolio response (optional)</param>
        /// <param name="pax">Number of pax (optional)</param>
        /// <param name="ages">Pax ages. If not present we will assume they are adults (optional)</param>
        /// <param name="bikes">Number of bikes (optional)</param>
        /// <param name="golfs">Number of golf baggages (optional)</param>
        /// <param name="bigs">Number of big luggages not bikes neither golf baggages (optional)</param>
        /// <param name="wheelchairs">Number of wheel chairs (optional)</param>
        /// <param name="incomingdate">Locale date for the incoming side of the transfer, in YYYYMMDD format (optional)</param>
        /// <param name="outgoingdate">Locale date for the outgoing / return side of the transfer, in YYYYMMDD format (optional)</param>
        /// <returns>Task of GetAvailableTransfersRS</returns>
        public async System.Threading.Tasks.Task<GetAvailableTransfersRS> GetAvailabeTransfersAsync (string authtoken, string from = null, string to = null, int? pax = null, List<int?> ages = null, int? bikes = null, int? golfs = null, int? bigs = null, int? wheelchairs = null, int? incomingdate = null, int? outgoingdate = null)
        {
             ApiResponse<GetAvailableTransfersRS> localVarResponse = await GetAvailabeTransfersAsyncWithHttpInfo(authtoken, from, to, pax, ages, bikes, golfs, bigs, wheelchairs, incomingdate, outgoingdate);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Use this method to know which transfers are available and their prices 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Auth token provided by your partner, and possibly renewed by using the /commons/newtoken method</param>
        /// <param name="from">Transfer origin, as got in the getportfolio response (optional)</param>
        /// <param name="to">Transfer destination, as got in the getportfolio response (optional)</param>
        /// <param name="pax">Number of pax (optional)</param>
        /// <param name="ages">Pax ages. If not present we will assume they are adults (optional)</param>
        /// <param name="bikes">Number of bikes (optional)</param>
        /// <param name="golfs">Number of golf baggages (optional)</param>
        /// <param name="bigs">Number of big luggages not bikes neither golf baggages (optional)</param>
        /// <param name="wheelchairs">Number of wheel chairs (optional)</param>
        /// <param name="incomingdate">Locale date for the incoming side of the transfer, in YYYYMMDD format (optional)</param>
        /// <param name="outgoingdate">Locale date for the outgoing / return side of the transfer, in YYYYMMDD format (optional)</param>
        /// <returns>Task of ApiResponse (GetAvailableTransfersRS)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetAvailableTransfersRS>> GetAvailabeTransfersAsyncWithHttpInfo (string authtoken, string from = null, string to = null, int? pax = null, List<int?> ages = null, int? bikes = null, int? golfs = null, int? bigs = null, int? wheelchairs = null, int? incomingdate = null, int? outgoingdate = null)
        {
            // verify the required parameter 'authtoken' is set
            if (authtoken == null)
                throw new ApiException(400, "Missing required parameter 'authtoken' when calling DefaultApi->GetAvailabeTransfers");

            var localVarPath = "/{authtoken}/transfer/available";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (authtoken != null) localVarPathParams.Add("authtoken", Configuration.ApiClient.ParameterToString(authtoken)); // path parameter
            if (from != null) localVarQueryParams.Add("from", Configuration.ApiClient.ParameterToString(from)); // query parameter
            if (to != null) localVarQueryParams.Add("to", Configuration.ApiClient.ParameterToString(to)); // query parameter
            if (pax != null) localVarQueryParams.Add("pax", Configuration.ApiClient.ParameterToString(pax)); // query parameter
            if (ages != null) localVarQueryParams.Add("ages", Configuration.ApiClient.ParameterToString(ages)); // query parameter
            if (bikes != null) localVarQueryParams.Add("bikes", Configuration.ApiClient.ParameterToString(bikes)); // query parameter
            if (golfs != null) localVarQueryParams.Add("golfs", Configuration.ApiClient.ParameterToString(golfs)); // query parameter
            if (bigs != null) localVarQueryParams.Add("bigs", Configuration.ApiClient.ParameterToString(bigs)); // query parameter
            if (wheelchairs != null) localVarQueryParams.Add("wheelchairs", Configuration.ApiClient.ParameterToString(wheelchairs)); // query parameter
            if (incomingdate != null) localVarQueryParams.Add("incomingdate", Configuration.ApiClient.ParameterToString(incomingdate)); // query parameter
            if (outgoingdate != null) localVarQueryParams.Add("outgoingdate", Configuration.ApiClient.ParameterToString(outgoingdate)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAvailabeTransfers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetAvailableTransfersRS>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetAvailableTransfersRS) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetAvailableTransfersRS)));
            
        }

        /// <summary>
        /// Get available activities By passing a resort and holidays dates you get a list of the available activities
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Auth token provided by your partner, and possibly renewed by using the /commons/newtoken method</param>
        /// <param name="start">Holidays start date in YYYYMMDD format (optional)</param>
        /// <param name="end">Holidays end date in YYYYMMDD format (optional)</param>
        /// <param name="resourceid">Resort ID. You can get it from commons/getportfolio (optional)</param>
        /// <param name="pax">Number of pax (optional)</param>
        /// <param name="ages">Ages for the paxes. You can include just children ages. If not present all pax will be treated as adults (optional)</param>
        /// <returns>GetAvailableActivitiesRS</returns>
        public GetAvailableActivitiesRS GetAvailableActivities (string authtoken, int? start = null, int? end = null, string resourceid = null, int? pax = null, List<int?> ages = null)
        {
             ApiResponse<GetAvailableActivitiesRS> localVarResponse = GetAvailableActivitiesWithHttpInfo(authtoken, start, end, resourceid, pax, ages);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get available activities By passing a resort and holidays dates you get a list of the available activities
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Auth token provided by your partner, and possibly renewed by using the /commons/newtoken method</param>
        /// <param name="start">Holidays start date in YYYYMMDD format (optional)</param>
        /// <param name="end">Holidays end date in YYYYMMDD format (optional)</param>
        /// <param name="resourceid">Resort ID. You can get it from commons/getportfolio (optional)</param>
        /// <param name="pax">Number of pax (optional)</param>
        /// <param name="ages">Ages for the paxes. You can include just children ages. If not present all pax will be treated as adults (optional)</param>
        /// <returns>ApiResponse of GetAvailableActivitiesRS</returns>
        public ApiResponse< GetAvailableActivitiesRS > GetAvailableActivitiesWithHttpInfo (string authtoken, int? start = null, int? end = null, string resourceid = null, int? pax = null, List<int?> ages = null)
        {
            // verify the required parameter 'authtoken' is set
            if (authtoken == null)
                throw new ApiException(400, "Missing required parameter 'authtoken' when calling DefaultApi->GetAvailableActivities");

            var localVarPath = "/{authtoken}/activity/available";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (authtoken != null) localVarPathParams.Add("authtoken", Configuration.ApiClient.ParameterToString(authtoken)); // path parameter
            if (start != null) localVarQueryParams.Add("start", Configuration.ApiClient.ParameterToString(start)); // query parameter
            if (end != null) localVarQueryParams.Add("end", Configuration.ApiClient.ParameterToString(end)); // query parameter
            if (resourceid != null) localVarQueryParams.Add("resourceid", Configuration.ApiClient.ParameterToString(resourceid)); // query parameter
            if (pax != null) localVarQueryParams.Add("pax", Configuration.ApiClient.ParameterToString(pax)); // query parameter
            if (ages != null) localVarQueryParams.Add("ages", Configuration.ApiClient.ParameterToString(ages)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAvailableActivities", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetAvailableActivitiesRS>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetAvailableActivitiesRS) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetAvailableActivitiesRS)));
            
        }

        /// <summary>
        /// Get available activities By passing a resort and holidays dates you get a list of the available activities
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Auth token provided by your partner, and possibly renewed by using the /commons/newtoken method</param>
        /// <param name="start">Holidays start date in YYYYMMDD format (optional)</param>
        /// <param name="end">Holidays end date in YYYYMMDD format (optional)</param>
        /// <param name="resourceid">Resort ID. You can get it from commons/getportfolio (optional)</param>
        /// <param name="pax">Number of pax (optional)</param>
        /// <param name="ages">Ages for the paxes. You can include just children ages. If not present all pax will be treated as adults (optional)</param>
        /// <returns>Task of GetAvailableActivitiesRS</returns>
        public async System.Threading.Tasks.Task<GetAvailableActivitiesRS> GetAvailableActivitiesAsync (string authtoken, int? start = null, int? end = null, string resourceid = null, int? pax = null, List<int?> ages = null)
        {
             ApiResponse<GetAvailableActivitiesRS> localVarResponse = await GetAvailableActivitiesAsyncWithHttpInfo(authtoken, start, end, resourceid, pax, ages);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get available activities By passing a resort and holidays dates you get a list of the available activities
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Auth token provided by your partner, and possibly renewed by using the /commons/newtoken method</param>
        /// <param name="start">Holidays start date in YYYYMMDD format (optional)</param>
        /// <param name="end">Holidays end date in YYYYMMDD format (optional)</param>
        /// <param name="resourceid">Resort ID. You can get it from commons/getportfolio (optional)</param>
        /// <param name="pax">Number of pax (optional)</param>
        /// <param name="ages">Ages for the paxes. You can include just children ages. If not present all pax will be treated as adults (optional)</param>
        /// <returns>Task of ApiResponse (GetAvailableActivitiesRS)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetAvailableActivitiesRS>> GetAvailableActivitiesAsyncWithHttpInfo (string authtoken, int? start = null, int? end = null, string resourceid = null, int? pax = null, List<int?> ages = null)
        {
            // verify the required parameter 'authtoken' is set
            if (authtoken == null)
                throw new ApiException(400, "Missing required parameter 'authtoken' when calling DefaultApi->GetAvailableActivities");

            var localVarPath = "/{authtoken}/activity/available";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (authtoken != null) localVarPathParams.Add("authtoken", Configuration.ApiClient.ParameterToString(authtoken)); // path parameter
            if (start != null) localVarQueryParams.Add("start", Configuration.ApiClient.ParameterToString(start)); // query parameter
            if (end != null) localVarQueryParams.Add("end", Configuration.ApiClient.ParameterToString(end)); // query parameter
            if (resourceid != null) localVarQueryParams.Add("resourceid", Configuration.ApiClient.ParameterToString(resourceid)); // query parameter
            if (pax != null) localVarQueryParams.Add("pax", Configuration.ApiClient.ParameterToString(pax)); // query parameter
            if (ages != null) localVarQueryParams.Add("ages", Configuration.ApiClient.ParameterToString(ages)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAvailableActivities", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetAvailableActivitiesRS>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetAvailableActivitiesRS) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetAvailableActivitiesRS)));
            
        }

        /// <summary>
        /// Use this method to know which hotels are available and their prices 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Auth token provided by your partner, and possibly renewed by using the /commons/newtoken method</param>
        /// <param name="resorts">The list of resorts you are interested in (optional)</param>
        /// <param name="checkin">The locale checkin date in YYYYMMDD format (optional)</param>
        /// <param name="checkout">The locale checkout date in YYYYMMDD format (optional)</param>
        /// <param name="occupancies">List of occupancies you need (optional)</param>
        /// <param name="includestaticinfo">Set to true if you want the response to include static info (hotel description, main hotel image, ...). If false (default value) static info will not be included in order to make the response lighter (optional)</param>
        /// <returns>GetAvailableHotelsRS</returns>
        public GetAvailableHotelsRS GetAvailableHotels (string authtoken, List<string> resorts = null, int? checkin = null, int? checkout = null, List<string> occupancies = null, bool? includestaticinfo = null)
        {
             ApiResponse<GetAvailableHotelsRS> localVarResponse = GetAvailableHotelsWithHttpInfo(authtoken, resorts, checkin, checkout, occupancies, includestaticinfo);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Use this method to know which hotels are available and their prices 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Auth token provided by your partner, and possibly renewed by using the /commons/newtoken method</param>
        /// <param name="resorts">The list of resorts you are interested in (optional)</param>
        /// <param name="checkin">The locale checkin date in YYYYMMDD format (optional)</param>
        /// <param name="checkout">The locale checkout date in YYYYMMDD format (optional)</param>
        /// <param name="occupancies">List of occupancies you need (optional)</param>
        /// <param name="includestaticinfo">Set to true if you want the response to include static info (hotel description, main hotel image, ...). If false (default value) static info will not be included in order to make the response lighter (optional)</param>
        /// <returns>ApiResponse of GetAvailableHotelsRS</returns>
        public ApiResponse< GetAvailableHotelsRS > GetAvailableHotelsWithHttpInfo (string authtoken, List<string> resorts = null, int? checkin = null, int? checkout = null, List<string> occupancies = null, bool? includestaticinfo = null)
        {
            // verify the required parameter 'authtoken' is set
            if (authtoken == null)
                throw new ApiException(400, "Missing required parameter 'authtoken' when calling DefaultApi->GetAvailableHotels");

            var localVarPath = "/{authtoken}/hotel/available";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (authtoken != null) localVarPathParams.Add("authtoken", Configuration.ApiClient.ParameterToString(authtoken)); // path parameter
            if (resorts != null) localVarQueryParams.Add("resorts", Configuration.ApiClient.ParameterToString(resorts)); // query parameter
            if (checkin != null) localVarQueryParams.Add("checkin", Configuration.ApiClient.ParameterToString(checkin)); // query parameter
            if (checkout != null) localVarQueryParams.Add("checkout", Configuration.ApiClient.ParameterToString(checkout)); // query parameter
            if (occupancies != null) localVarQueryParams.Add("occupancies", Configuration.ApiClient.ParameterToString(occupancies)); // query parameter
            if (includestaticinfo != null) localVarQueryParams.Add("includestaticinfo", Configuration.ApiClient.ParameterToString(includestaticinfo)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAvailableHotels", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetAvailableHotelsRS>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetAvailableHotelsRS) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetAvailableHotelsRS)));
            
        }

        /// <summary>
        /// Use this method to know which hotels are available and their prices 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Auth token provided by your partner, and possibly renewed by using the /commons/newtoken method</param>
        /// <param name="resorts">The list of resorts you are interested in (optional)</param>
        /// <param name="checkin">The locale checkin date in YYYYMMDD format (optional)</param>
        /// <param name="checkout">The locale checkout date in YYYYMMDD format (optional)</param>
        /// <param name="occupancies">List of occupancies you need (optional)</param>
        /// <param name="includestaticinfo">Set to true if you want the response to include static info (hotel description, main hotel image, ...). If false (default value) static info will not be included in order to make the response lighter (optional)</param>
        /// <returns>Task of GetAvailableHotelsRS</returns>
        public async System.Threading.Tasks.Task<GetAvailableHotelsRS> GetAvailableHotelsAsync (string authtoken, List<string> resorts = null, int? checkin = null, int? checkout = null, List<string> occupancies = null, bool? includestaticinfo = null)
        {
             ApiResponse<GetAvailableHotelsRS> localVarResponse = await GetAvailableHotelsAsyncWithHttpInfo(authtoken, resorts, checkin, checkout, occupancies, includestaticinfo);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Use this method to know which hotels are available and their prices 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Auth token provided by your partner, and possibly renewed by using the /commons/newtoken method</param>
        /// <param name="resorts">The list of resorts you are interested in (optional)</param>
        /// <param name="checkin">The locale checkin date in YYYYMMDD format (optional)</param>
        /// <param name="checkout">The locale checkout date in YYYYMMDD format (optional)</param>
        /// <param name="occupancies">List of occupancies you need (optional)</param>
        /// <param name="includestaticinfo">Set to true if you want the response to include static info (hotel description, main hotel image, ...). If false (default value) static info will not be included in order to make the response lighter (optional)</param>
        /// <returns>Task of ApiResponse (GetAvailableHotelsRS)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetAvailableHotelsRS>> GetAvailableHotelsAsyncWithHttpInfo (string authtoken, List<string> resorts = null, int? checkin = null, int? checkout = null, List<string> occupancies = null, bool? includestaticinfo = null)
        {
            // verify the required parameter 'authtoken' is set
            if (authtoken == null)
                throw new ApiException(400, "Missing required parameter 'authtoken' when calling DefaultApi->GetAvailableHotels");

            var localVarPath = "/{authtoken}/hotel/available";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (authtoken != null) localVarPathParams.Add("authtoken", Configuration.ApiClient.ParameterToString(authtoken)); // path parameter
            if (resorts != null) localVarQueryParams.Add("resorts", Configuration.ApiClient.ParameterToString(resorts)); // query parameter
            if (checkin != null) localVarQueryParams.Add("checkin", Configuration.ApiClient.ParameterToString(checkin)); // query parameter
            if (checkout != null) localVarQueryParams.Add("checkout", Configuration.ApiClient.ParameterToString(checkout)); // query parameter
            if (occupancies != null) localVarQueryParams.Add("occupancies", Configuration.ApiClient.ParameterToString(occupancies)); // query parameter
            if (includestaticinfo != null) localVarQueryParams.Add("includestaticinfo", Configuration.ApiClient.ParameterToString(includestaticinfo)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAvailableHotels", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetAvailableHotelsRS>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetAvailableHotelsRS) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetAvailableHotelsRS)));
            
        }

        /// <summary>
        /// Method to get a list of bookings 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Auth token provided by your partner, and possibly renewed by using the /commons/newtoken method</param>
        /// <param name="confirmedfrom">Starting date you want service bookings confirmed from. In YYYYMMDD format (optional)</param>
        /// <param name="confirmedto">Ending date you want service bookings confirmed to. In YYYYMMDD format (optional)</param>
        /// <param name="startingfrom">Starting date you want service bookings starting from. In YYYYMMDD format (optional)</param>
        /// <param name="startingto">Ending date you want service bookings starting from. In YYYYMMDD format (optional)</param>
        /// <returns>GetBookingsRS</returns>
        public GetBookingsRS GetBookings (string authtoken, int? confirmedfrom = null, int? confirmedto = null, int? startingfrom = null, int? startingto = null)
        {
             ApiResponse<GetBookingsRS> localVarResponse = GetBookingsWithHttpInfo(authtoken, confirmedfrom, confirmedto, startingfrom, startingto);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Method to get a list of bookings 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Auth token provided by your partner, and possibly renewed by using the /commons/newtoken method</param>
        /// <param name="confirmedfrom">Starting date you want service bookings confirmed from. In YYYYMMDD format (optional)</param>
        /// <param name="confirmedto">Ending date you want service bookings confirmed to. In YYYYMMDD format (optional)</param>
        /// <param name="startingfrom">Starting date you want service bookings starting from. In YYYYMMDD format (optional)</param>
        /// <param name="startingto">Ending date you want service bookings starting from. In YYYYMMDD format (optional)</param>
        /// <returns>ApiResponse of GetBookingsRS</returns>
        public ApiResponse< GetBookingsRS > GetBookingsWithHttpInfo (string authtoken, int? confirmedfrom = null, int? confirmedto = null, int? startingfrom = null, int? startingto = null)
        {
            // verify the required parameter 'authtoken' is set
            if (authtoken == null)
                throw new ApiException(400, "Missing required parameter 'authtoken' when calling DefaultApi->GetBookings");

            var localVarPath = "/{authtoken}/commons/bookings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (authtoken != null) localVarPathParams.Add("authtoken", Configuration.ApiClient.ParameterToString(authtoken)); // path parameter
            if (confirmedfrom != null) localVarQueryParams.Add("confirmedfrom", Configuration.ApiClient.ParameterToString(confirmedfrom)); // query parameter
            if (confirmedto != null) localVarQueryParams.Add("confirmedto", Configuration.ApiClient.ParameterToString(confirmedto)); // query parameter
            if (startingfrom != null) localVarQueryParams.Add("startingfrom", Configuration.ApiClient.ParameterToString(startingfrom)); // query parameter
            if (startingto != null) localVarQueryParams.Add("startingto", Configuration.ApiClient.ParameterToString(startingto)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBookings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetBookingsRS>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetBookingsRS) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetBookingsRS)));
            
        }

        /// <summary>
        /// Method to get a list of bookings 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Auth token provided by your partner, and possibly renewed by using the /commons/newtoken method</param>
        /// <param name="confirmedfrom">Starting date you want service bookings confirmed from. In YYYYMMDD format (optional)</param>
        /// <param name="confirmedto">Ending date you want service bookings confirmed to. In YYYYMMDD format (optional)</param>
        /// <param name="startingfrom">Starting date you want service bookings starting from. In YYYYMMDD format (optional)</param>
        /// <param name="startingto">Ending date you want service bookings starting from. In YYYYMMDD format (optional)</param>
        /// <returns>Task of GetBookingsRS</returns>
        public async System.Threading.Tasks.Task<GetBookingsRS> GetBookingsAsync (string authtoken, int? confirmedfrom = null, int? confirmedto = null, int? startingfrom = null, int? startingto = null)
        {
             ApiResponse<GetBookingsRS> localVarResponse = await GetBookingsAsyncWithHttpInfo(authtoken, confirmedfrom, confirmedto, startingfrom, startingto);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Method to get a list of bookings 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Auth token provided by your partner, and possibly renewed by using the /commons/newtoken method</param>
        /// <param name="confirmedfrom">Starting date you want service bookings confirmed from. In YYYYMMDD format (optional)</param>
        /// <param name="confirmedto">Ending date you want service bookings confirmed to. In YYYYMMDD format (optional)</param>
        /// <param name="startingfrom">Starting date you want service bookings starting from. In YYYYMMDD format (optional)</param>
        /// <param name="startingto">Ending date you want service bookings starting from. In YYYYMMDD format (optional)</param>
        /// <returns>Task of ApiResponse (GetBookingsRS)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetBookingsRS>> GetBookingsAsyncWithHttpInfo (string authtoken, int? confirmedfrom = null, int? confirmedto = null, int? startingfrom = null, int? startingto = null)
        {
            // verify the required parameter 'authtoken' is set
            if (authtoken == null)
                throw new ApiException(400, "Missing required parameter 'authtoken' when calling DefaultApi->GetBookings");

            var localVarPath = "/{authtoken}/commons/bookings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (authtoken != null) localVarPathParams.Add("authtoken", Configuration.ApiClient.ParameterToString(authtoken)); // path parameter
            if (confirmedfrom != null) localVarQueryParams.Add("confirmedfrom", Configuration.ApiClient.ParameterToString(confirmedfrom)); // query parameter
            if (confirmedto != null) localVarQueryParams.Add("confirmedto", Configuration.ApiClient.ParameterToString(confirmedto)); // query parameter
            if (startingfrom != null) localVarQueryParams.Add("startingfrom", Configuration.ApiClient.ParameterToString(startingfrom)); // query parameter
            if (startingto != null) localVarQueryParams.Add("startingto", Configuration.ApiClient.ParameterToString(startingto)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBookings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetBookingsRS>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetBookingsRS) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetBookingsRS)));
            
        }

        /// <summary>
        /// Method to get a resource data sheet. E.g. descriptions, images, features 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Auth token provided by your partner, and possibly renewed by using the /commons/newtoken method</param>
        /// <param name="resourceid"></param>
        /// <returns>GetDataSheetRS</returns>
        public GetDataSheetRS GetDataSheet (string authtoken, string resourceid)
        {
             ApiResponse<GetDataSheetRS> localVarResponse = GetDataSheetWithHttpInfo(authtoken, resourceid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Method to get a resource data sheet. E.g. descriptions, images, features 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Auth token provided by your partner, and possibly renewed by using the /commons/newtoken method</param>
        /// <param name="resourceid"></param>
        /// <returns>ApiResponse of GetDataSheetRS</returns>
        public ApiResponse< GetDataSheetRS > GetDataSheetWithHttpInfo (string authtoken, string resourceid)
        {
            // verify the required parameter 'authtoken' is set
            if (authtoken == null)
                throw new ApiException(400, "Missing required parameter 'authtoken' when calling DefaultApi->GetDataSheet");
            // verify the required parameter 'resourceid' is set
            if (resourceid == null)
                throw new ApiException(400, "Missing required parameter 'resourceid' when calling DefaultApi->GetDataSheet");

            var localVarPath = "/{authtoken}/commons/datasheet/{resourceid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (authtoken != null) localVarPathParams.Add("authtoken", Configuration.ApiClient.ParameterToString(authtoken)); // path parameter
            if (resourceid != null) localVarPathParams.Add("resourceid", Configuration.ApiClient.ParameterToString(resourceid)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDataSheet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetDataSheetRS>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetDataSheetRS) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetDataSheetRS)));
            
        }

        /// <summary>
        /// Method to get a resource data sheet. E.g. descriptions, images, features 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Auth token provided by your partner, and possibly renewed by using the /commons/newtoken method</param>
        /// <param name="resourceid"></param>
        /// <returns>Task of GetDataSheetRS</returns>
        public async System.Threading.Tasks.Task<GetDataSheetRS> GetDataSheetAsync (string authtoken, string resourceid)
        {
             ApiResponse<GetDataSheetRS> localVarResponse = await GetDataSheetAsyncWithHttpInfo(authtoken, resourceid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Method to get a resource data sheet. E.g. descriptions, images, features 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Auth token provided by your partner, and possibly renewed by using the /commons/newtoken method</param>
        /// <param name="resourceid"></param>
        /// <returns>Task of ApiResponse (GetDataSheetRS)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetDataSheetRS>> GetDataSheetAsyncWithHttpInfo (string authtoken, string resourceid)
        {
            // verify the required parameter 'authtoken' is set
            if (authtoken == null)
                throw new ApiException(400, "Missing required parameter 'authtoken' when calling DefaultApi->GetDataSheet");
            // verify the required parameter 'resourceid' is set
            if (resourceid == null)
                throw new ApiException(400, "Missing required parameter 'resourceid' when calling DefaultApi->GetDataSheet");

            var localVarPath = "/{authtoken}/commons/datasheet/{resourceid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (authtoken != null) localVarPathParams.Add("authtoken", Configuration.ApiClient.ParameterToString(authtoken)); // path parameter
            if (resourceid != null) localVarPathParams.Add("resourceid", Configuration.ApiClient.ParameterToString(resourceid)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDataSheet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetDataSheetRS>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetDataSheetRS) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetDataSheetRS)));
            
        }

        /// <summary>
        /// Use this method to know which hotels are you allowed to update. It provides the ids to be used by the channel manager 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Auth token provided by your partner, and possibly renewed by using the /commons/newtoken method</param>
        /// <returns>GetGrantedHotelsRS</returns>
        public GetGrantedHotelsRS GetGrantedHotels (string authtoken)
        {
             ApiResponse<GetGrantedHotelsRS> localVarResponse = GetGrantedHotelsWithHttpInfo(authtoken);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Use this method to know which hotels are you allowed to update. It provides the ids to be used by the channel manager 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Auth token provided by your partner, and possibly renewed by using the /commons/newtoken method</param>
        /// <returns>ApiResponse of GetGrantedHotelsRS</returns>
        public ApiResponse< GetGrantedHotelsRS > GetGrantedHotelsWithHttpInfo (string authtoken)
        {
            // verify the required parameter 'authtoken' is set
            if (authtoken == null)
                throw new ApiException(400, "Missing required parameter 'authtoken' when calling DefaultApi->GetGrantedHotels");

            var localVarPath = "/{authtoken}/channel/granted";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (authtoken != null) localVarPathParams.Add("authtoken", Configuration.ApiClient.ParameterToString(authtoken)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetGrantedHotels", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetGrantedHotelsRS>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetGrantedHotelsRS) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetGrantedHotelsRS)));
            
        }

        /// <summary>
        /// Use this method to know which hotels are you allowed to update. It provides the ids to be used by the channel manager 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Auth token provided by your partner, and possibly renewed by using the /commons/newtoken method</param>
        /// <returns>Task of GetGrantedHotelsRS</returns>
        public async System.Threading.Tasks.Task<GetGrantedHotelsRS> GetGrantedHotelsAsync (string authtoken)
        {
             ApiResponse<GetGrantedHotelsRS> localVarResponse = await GetGrantedHotelsAsyncWithHttpInfo(authtoken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Use this method to know which hotels are you allowed to update. It provides the ids to be used by the channel manager 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Auth token provided by your partner, and possibly renewed by using the /commons/newtoken method</param>
        /// <returns>Task of ApiResponse (GetGrantedHotelsRS)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetGrantedHotelsRS>> GetGrantedHotelsAsyncWithHttpInfo (string authtoken)
        {
            // verify the required parameter 'authtoken' is set
            if (authtoken == null)
                throw new ApiException(400, "Missing required parameter 'authtoken' when calling DefaultApi->GetGrantedHotels");

            var localVarPath = "/{authtoken}/channel/granted";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (authtoken != null) localVarPathParams.Add("authtoken", Configuration.ApiClient.ParameterToString(authtoken)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetGrantedHotels", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetGrantedHotelsRS>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetGrantedHotelsRS) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetGrantedHotelsRS)));
            
        }

        /// <summary>
        /// Use this methos to guess cancellation costs and important remarks regarding a price 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Auth token provided by your partner, and possibly renewed by using the /commons/newtoken method</param>
        /// <param name="key">The hotel price key, as provided in the /hotel/available step</param>
        /// <returns>GetHotelPriceDetailsRS</returns>
        public GetHotelPriceDetailsRS GetHotelPriceDetails (string authtoken, string key)
        {
             ApiResponse<GetHotelPriceDetailsRS> localVarResponse = GetHotelPriceDetailsWithHttpInfo(authtoken, key);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Use this methos to guess cancellation costs and important remarks regarding a price 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Auth token provided by your partner, and possibly renewed by using the /commons/newtoken method</param>
        /// <param name="key">The hotel price key, as provided in the /hotel/available step</param>
        /// <returns>ApiResponse of GetHotelPriceDetailsRS</returns>
        public ApiResponse< GetHotelPriceDetailsRS > GetHotelPriceDetailsWithHttpInfo (string authtoken, string key)
        {
            // verify the required parameter 'authtoken' is set
            if (authtoken == null)
                throw new ApiException(400, "Missing required parameter 'authtoken' when calling DefaultApi->GetHotelPriceDetails");
            // verify the required parameter 'key' is set
            if (key == null)
                throw new ApiException(400, "Missing required parameter 'key' when calling DefaultApi->GetHotelPriceDetails");

            var localVarPath = "/{authtoken}/hotel/pricedetails/{key}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (authtoken != null) localVarPathParams.Add("authtoken", Configuration.ApiClient.ParameterToString(authtoken)); // path parameter
            if (key != null) localVarPathParams.Add("key", Configuration.ApiClient.ParameterToString(key)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetHotelPriceDetails", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetHotelPriceDetailsRS>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetHotelPriceDetailsRS) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetHotelPriceDetailsRS)));
            
        }

        /// <summary>
        /// Use this methos to guess cancellation costs and important remarks regarding a price 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Auth token provided by your partner, and possibly renewed by using the /commons/newtoken method</param>
        /// <param name="key">The hotel price key, as provided in the /hotel/available step</param>
        /// <returns>Task of GetHotelPriceDetailsRS</returns>
        public async System.Threading.Tasks.Task<GetHotelPriceDetailsRS> GetHotelPriceDetailsAsync (string authtoken, string key)
        {
             ApiResponse<GetHotelPriceDetailsRS> localVarResponse = await GetHotelPriceDetailsAsyncWithHttpInfo(authtoken, key);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Use this methos to guess cancellation costs and important remarks regarding a price 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Auth token provided by your partner, and possibly renewed by using the /commons/newtoken method</param>
        /// <param name="key">The hotel price key, as provided in the /hotel/available step</param>
        /// <returns>Task of ApiResponse (GetHotelPriceDetailsRS)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetHotelPriceDetailsRS>> GetHotelPriceDetailsAsyncWithHttpInfo (string authtoken, string key)
        {
            // verify the required parameter 'authtoken' is set
            if (authtoken == null)
                throw new ApiException(400, "Missing required parameter 'authtoken' when calling DefaultApi->GetHotelPriceDetails");
            // verify the required parameter 'key' is set
            if (key == null)
                throw new ApiException(400, "Missing required parameter 'key' when calling DefaultApi->GetHotelPriceDetails");

            var localVarPath = "/{authtoken}/hotel/pricedetails/{key}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (authtoken != null) localVarPathParams.Add("authtoken", Configuration.ApiClient.ParameterToString(authtoken)); // path parameter
            if (key != null) localVarPathParams.Add("key", Configuration.ApiClient.ParameterToString(key)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetHotelPriceDetails", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetHotelPriceDetailsRS>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetHotelPriceDetailsRS) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetHotelPriceDetailsRS)));
            
        }

        /// <summary>
        /// Method to get the whole product tree 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Auth token provided by your partner, and possibly renewed by using the /commons/newtoken method</param>
        /// <returns>GetPortfolioRS</returns>
        public GetPortfolioRS GetPortfolio (string authtoken)
        {
             ApiResponse<GetPortfolioRS> localVarResponse = GetPortfolioWithHttpInfo(authtoken);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Method to get the whole product tree 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Auth token provided by your partner, and possibly renewed by using the /commons/newtoken method</param>
        /// <returns>ApiResponse of GetPortfolioRS</returns>
        public ApiResponse< GetPortfolioRS > GetPortfolioWithHttpInfo (string authtoken)
        {
            // verify the required parameter 'authtoken' is set
            if (authtoken == null)
                throw new ApiException(400, "Missing required parameter 'authtoken' when calling DefaultApi->GetPortfolio");

            var localVarPath = "/{authtoken}/commons/portfolio";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (authtoken != null) localVarPathParams.Add("authtoken", Configuration.ApiClient.ParameterToString(authtoken)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPortfolio", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetPortfolioRS>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetPortfolioRS) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetPortfolioRS)));
            
        }

        /// <summary>
        /// Method to get the whole product tree 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Auth token provided by your partner, and possibly renewed by using the /commons/newtoken method</param>
        /// <returns>Task of GetPortfolioRS</returns>
        public async System.Threading.Tasks.Task<GetPortfolioRS> GetPortfolioAsync (string authtoken)
        {
             ApiResponse<GetPortfolioRS> localVarResponse = await GetPortfolioAsyncWithHttpInfo(authtoken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Method to get the whole product tree 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Auth token provided by your partner, and possibly renewed by using the /commons/newtoken method</param>
        /// <returns>Task of ApiResponse (GetPortfolioRS)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetPortfolioRS>> GetPortfolioAsyncWithHttpInfo (string authtoken)
        {
            // verify the required parameter 'authtoken' is set
            if (authtoken == null)
                throw new ApiException(400, "Missing required parameter 'authtoken' when calling DefaultApi->GetPortfolio");

            var localVarPath = "/{authtoken}/commons/portfolio";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (authtoken != null) localVarPathParams.Add("authtoken", Configuration.ApiClient.ParameterToString(authtoken)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPortfolio", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetPortfolioRS>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetPortfolioRS) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetPortfolioRS)));
            
        }

        /// <summary>
        /// Use this method to download the list of hotel bookings 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Auth token provided by your partner, and possibly renewed by using the /commons/newtoken method</param>
        /// <param name="confirmedfrom">Starting date you want service bookings confirmed from. In YYYYMMDD format (optional)</param>
        /// <param name="confirmedto">Ending date you want service bookings confirmed to. In YYYYMMDD format (optional)</param>
        /// <param name="startingfrom">Starting date you want service bookings starting from. In YYYYMMDD format (optional)</param>
        /// <param name="startingto">Ending date you want service bookings starting from. In YYYYMMDD format (optional)</param>
        /// <returns>GetRoomingListRS</returns>
        public GetRoomingListRS GetRoomingList (string authtoken, int? confirmedfrom = null, int? confirmedto = null, int? startingfrom = null, int? startingto = null)
        {
             ApiResponse<GetRoomingListRS> localVarResponse = GetRoomingListWithHttpInfo(authtoken, confirmedfrom, confirmedto, startingfrom, startingto);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Use this method to download the list of hotel bookings 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Auth token provided by your partner, and possibly renewed by using the /commons/newtoken method</param>
        /// <param name="confirmedfrom">Starting date you want service bookings confirmed from. In YYYYMMDD format (optional)</param>
        /// <param name="confirmedto">Ending date you want service bookings confirmed to. In YYYYMMDD format (optional)</param>
        /// <param name="startingfrom">Starting date you want service bookings starting from. In YYYYMMDD format (optional)</param>
        /// <param name="startingto">Ending date you want service bookings starting from. In YYYYMMDD format (optional)</param>
        /// <returns>ApiResponse of GetRoomingListRS</returns>
        public ApiResponse< GetRoomingListRS > GetRoomingListWithHttpInfo (string authtoken, int? confirmedfrom = null, int? confirmedto = null, int? startingfrom = null, int? startingto = null)
        {
            // verify the required parameter 'authtoken' is set
            if (authtoken == null)
                throw new ApiException(400, "Missing required parameter 'authtoken' when calling DefaultApi->GetRoomingList");

            var localVarPath = "/{authtoken}/channel/roominglist";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (authtoken != null) localVarPathParams.Add("authtoken", Configuration.ApiClient.ParameterToString(authtoken)); // path parameter
            if (confirmedfrom != null) localVarQueryParams.Add("confirmedfrom", Configuration.ApiClient.ParameterToString(confirmedfrom)); // query parameter
            if (confirmedto != null) localVarQueryParams.Add("confirmedto", Configuration.ApiClient.ParameterToString(confirmedto)); // query parameter
            if (startingfrom != null) localVarQueryParams.Add("startingfrom", Configuration.ApiClient.ParameterToString(startingfrom)); // query parameter
            if (startingto != null) localVarQueryParams.Add("startingto", Configuration.ApiClient.ParameterToString(startingto)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRoomingList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetRoomingListRS>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetRoomingListRS) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetRoomingListRS)));
            
        }

        /// <summary>
        /// Use this method to download the list of hotel bookings 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Auth token provided by your partner, and possibly renewed by using the /commons/newtoken method</param>
        /// <param name="confirmedfrom">Starting date you want service bookings confirmed from. In YYYYMMDD format (optional)</param>
        /// <param name="confirmedto">Ending date you want service bookings confirmed to. In YYYYMMDD format (optional)</param>
        /// <param name="startingfrom">Starting date you want service bookings starting from. In YYYYMMDD format (optional)</param>
        /// <param name="startingto">Ending date you want service bookings starting from. In YYYYMMDD format (optional)</param>
        /// <returns>Task of GetRoomingListRS</returns>
        public async System.Threading.Tasks.Task<GetRoomingListRS> GetRoomingListAsync (string authtoken, int? confirmedfrom = null, int? confirmedto = null, int? startingfrom = null, int? startingto = null)
        {
             ApiResponse<GetRoomingListRS> localVarResponse = await GetRoomingListAsyncWithHttpInfo(authtoken, confirmedfrom, confirmedto, startingfrom, startingto);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Use this method to download the list of hotel bookings 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Auth token provided by your partner, and possibly renewed by using the /commons/newtoken method</param>
        /// <param name="confirmedfrom">Starting date you want service bookings confirmed from. In YYYYMMDD format (optional)</param>
        /// <param name="confirmedto">Ending date you want service bookings confirmed to. In YYYYMMDD format (optional)</param>
        /// <param name="startingfrom">Starting date you want service bookings starting from. In YYYYMMDD format (optional)</param>
        /// <param name="startingto">Ending date you want service bookings starting from. In YYYYMMDD format (optional)</param>
        /// <returns>Task of ApiResponse (GetRoomingListRS)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetRoomingListRS>> GetRoomingListAsyncWithHttpInfo (string authtoken, int? confirmedfrom = null, int? confirmedto = null, int? startingfrom = null, int? startingto = null)
        {
            // verify the required parameter 'authtoken' is set
            if (authtoken == null)
                throw new ApiException(400, "Missing required parameter 'authtoken' when calling DefaultApi->GetRoomingList");

            var localVarPath = "/{authtoken}/channel/roominglist";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (authtoken != null) localVarPathParams.Add("authtoken", Configuration.ApiClient.ParameterToString(authtoken)); // path parameter
            if (confirmedfrom != null) localVarQueryParams.Add("confirmedfrom", Configuration.ApiClient.ParameterToString(confirmedfrom)); // query parameter
            if (confirmedto != null) localVarQueryParams.Add("confirmedto", Configuration.ApiClient.ParameterToString(confirmedto)); // query parameter
            if (startingfrom != null) localVarQueryParams.Add("startingfrom", Configuration.ApiClient.ParameterToString(startingfrom)); // query parameter
            if (startingto != null) localVarQueryParams.Add("startingto", Configuration.ApiClient.ParameterToString(startingto)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRoomingList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetRoomingListRS>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetRoomingListRS) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetRoomingListRS)));
            
        }

        /// <summary>
        /// Use this method to get or renew your authentication token 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Auth token provided by your partner, and possibly renewed by using the /commons/newtoken method</param>
        /// <param name="user"> (optional)</param>
        /// <returns>string</returns>
        public string GetToken (string authtoken, string user = null)
        {
             ApiResponse<string> localVarResponse = GetTokenWithHttpInfo(authtoken, user);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Use this method to get or renew your authentication token 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Auth token provided by your partner, and possibly renewed by using the /commons/newtoken method</param>
        /// <param name="user"> (optional)</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > GetTokenWithHttpInfo (string authtoken, string user = null)
        {
            // verify the required parameter 'authtoken' is set
            if (authtoken == null)
                throw new ApiException(400, "Missing required parameter 'authtoken' when calling DefaultApi->GetToken");

            var localVarPath = "/{authtoken}/commons/newtoken";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (authtoken != null) localVarPathParams.Add("authtoken", Configuration.ApiClient.ParameterToString(authtoken)); // path parameter
            if (user != null) localVarQueryParams.Add("user", Configuration.ApiClient.ParameterToString(user)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetToken", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
            
        }

        /// <summary>
        /// Use this method to get or renew your authentication token 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Auth token provided by your partner, and possibly renewed by using the /commons/newtoken method</param>
        /// <param name="user"> (optional)</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> GetTokenAsync (string authtoken, string user = null)
        {
             ApiResponse<string> localVarResponse = await GetTokenAsyncWithHttpInfo(authtoken, user);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Use this method to get or renew your authentication token 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Auth token provided by your partner, and possibly renewed by using the /commons/newtoken method</param>
        /// <param name="user"> (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> GetTokenAsyncWithHttpInfo (string authtoken, string user = null)
        {
            // verify the required parameter 'authtoken' is set
            if (authtoken == null)
                throw new ApiException(400, "Missing required parameter 'authtoken' when calling DefaultApi->GetToken");

            var localVarPath = "/{authtoken}/commons/newtoken";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (authtoken != null) localVarPathParams.Add("authtoken", Configuration.ApiClient.ParameterToString(authtoken)); // path parameter
            if (user != null) localVarQueryParams.Add("user", Configuration.ApiClient.ParameterToString(user)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetToken", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
            
        }

        /// <summary>
        /// Use this method to guess cancellation costs and important remarks 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Auth token provided by your partner, and possibly renewed by using the /commons/newtoken method</param>
        /// <param name="key">The hotel price key, as provided in the /transfer/available step</param>
        /// <returns>GetTransferPriceDetailsRS</returns>
        public GetTransferPriceDetailsRS GetTransferPriceDetails (string authtoken, string key)
        {
             ApiResponse<GetTransferPriceDetailsRS> localVarResponse = GetTransferPriceDetailsWithHttpInfo(authtoken, key);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Use this method to guess cancellation costs and important remarks 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Auth token provided by your partner, and possibly renewed by using the /commons/newtoken method</param>
        /// <param name="key">The hotel price key, as provided in the /transfer/available step</param>
        /// <returns>ApiResponse of GetTransferPriceDetailsRS</returns>
        public ApiResponse< GetTransferPriceDetailsRS > GetTransferPriceDetailsWithHttpInfo (string authtoken, string key)
        {
            // verify the required parameter 'authtoken' is set
            if (authtoken == null)
                throw new ApiException(400, "Missing required parameter 'authtoken' when calling DefaultApi->GetTransferPriceDetails");
            // verify the required parameter 'key' is set
            if (key == null)
                throw new ApiException(400, "Missing required parameter 'key' when calling DefaultApi->GetTransferPriceDetails");

            var localVarPath = "/{authtoken}/transfer/pricedetails/{key}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (authtoken != null) localVarPathParams.Add("authtoken", Configuration.ApiClient.ParameterToString(authtoken)); // path parameter
            if (key != null) localVarPathParams.Add("key", Configuration.ApiClient.ParameterToString(key)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTransferPriceDetails", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetTransferPriceDetailsRS>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetTransferPriceDetailsRS) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetTransferPriceDetailsRS)));
            
        }

        /// <summary>
        /// Use this method to guess cancellation costs and important remarks 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Auth token provided by your partner, and possibly renewed by using the /commons/newtoken method</param>
        /// <param name="key">The hotel price key, as provided in the /transfer/available step</param>
        /// <returns>Task of GetTransferPriceDetailsRS</returns>
        public async System.Threading.Tasks.Task<GetTransferPriceDetailsRS> GetTransferPriceDetailsAsync (string authtoken, string key)
        {
             ApiResponse<GetTransferPriceDetailsRS> localVarResponse = await GetTransferPriceDetailsAsyncWithHttpInfo(authtoken, key);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Use this method to guess cancellation costs and important remarks 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Auth token provided by your partner, and possibly renewed by using the /commons/newtoken method</param>
        /// <param name="key">The hotel price key, as provided in the /transfer/available step</param>
        /// <returns>Task of ApiResponse (GetTransferPriceDetailsRS)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetTransferPriceDetailsRS>> GetTransferPriceDetailsAsyncWithHttpInfo (string authtoken, string key)
        {
            // verify the required parameter 'authtoken' is set
            if (authtoken == null)
                throw new ApiException(400, "Missing required parameter 'authtoken' when calling DefaultApi->GetTransferPriceDetails");
            // verify the required parameter 'key' is set
            if (key == null)
                throw new ApiException(400, "Missing required parameter 'key' when calling DefaultApi->GetTransferPriceDetails");

            var localVarPath = "/{authtoken}/transfer/pricedetails/{key}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (authtoken != null) localVarPathParams.Add("authtoken", Configuration.ApiClient.ParameterToString(authtoken)); // path parameter
            if (key != null) localVarPathParams.Add("key", Configuration.ApiClient.ParameterToString(key)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTransferPriceDetails", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetTransferPriceDetailsRS>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetTransferPriceDetailsRS) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetTransferPriceDetailsRS)));
            
        }

        /// <summary>
        /// Use this method to update hotel inventory 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Auth token provided by your partner, and possibly renewed by using the /commons/newtoken method</param>
        /// <param name="body"> (optional)</param>
        /// <returns>UpdateRS</returns>
        public UpdateRS Update (string authtoken, UpdateRQ body = null)
        {
             ApiResponse<UpdateRS> localVarResponse = UpdateWithHttpInfo(authtoken, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Use this method to update hotel inventory 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Auth token provided by your partner, and possibly renewed by using the /commons/newtoken method</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of UpdateRS</returns>
        public ApiResponse< UpdateRS > UpdateWithHttpInfo (string authtoken, UpdateRQ body = null)
        {
            // verify the required parameter 'authtoken' is set
            if (authtoken == null)
                throw new ApiException(400, "Missing required parameter 'authtoken' when calling DefaultApi->Update");

            var localVarPath = "/{authtoken}/channel/hotel/inventory";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (authtoken != null) localVarPathParams.Add("authtoken", Configuration.ApiClient.ParameterToString(authtoken)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Update", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdateRS>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UpdateRS) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdateRS)));
            
        }

        /// <summary>
        /// Use this method to update hotel inventory 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Auth token provided by your partner, and possibly renewed by using the /commons/newtoken method</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of UpdateRS</returns>
        public async System.Threading.Tasks.Task<UpdateRS> UpdateAsync (string authtoken, UpdateRQ body = null)
        {
             ApiResponse<UpdateRS> localVarResponse = await UpdateAsyncWithHttpInfo(authtoken, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Use this method to update hotel inventory 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Auth token provided by your partner, and possibly renewed by using the /commons/newtoken method</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (UpdateRS)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UpdateRS>> UpdateAsyncWithHttpInfo (string authtoken, UpdateRQ body = null)
        {
            // verify the required parameter 'authtoken' is set
            if (authtoken == null)
                throw new ApiException(400, "Missing required parameter 'authtoken' when calling DefaultApi->Update");

            var localVarPath = "/{authtoken}/channel/hotel/inventory";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (authtoken != null) localVarPathParams.Add("authtoken", Configuration.ApiClient.ParameterToString(authtoken)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Update", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdateRS>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UpdateRS) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdateRS)));
            
        }

    }
}
