/* 
 * EasyTravelApi
 *
 * API for travel agents
 *
 * OpenAPI spec version: 0.1.9
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing DefaultApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class DefaultApiTests
    {
        private DefaultApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new DefaultApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of DefaultApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' DefaultApi
            //Assert.IsInstanceOfType(typeof(DefaultApi), instance, "instance is a DefaultApi");
        }

        
        /// <summary>
        /// Test BookActivity
        /// </summary>
        [Test]
        public void BookActivityTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authtoken = null;
            //BookActivityRQ body = null;
            //var response = instance.BookActivity(authtoken, body);
            //Assert.IsInstanceOf<BookActivityRS> (response, "response is BookActivityRS");
        }
        
        /// <summary>
        /// Test BookHotel
        /// </summary>
        [Test]
        public void BookHotelTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authtoken = null;
            //BookHotelRQ body = null;
            //var response = instance.BookHotel(authtoken, body);
            //Assert.IsInstanceOf<BookHotelRS> (response, "response is BookHotelRS");
        }
        
        /// <summary>
        /// Test BookTransfer
        /// </summary>
        [Test]
        public void BookTransferTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authtoken = null;
            //BookTransferRQ body = null;
            //var response = instance.BookTransfer(authtoken, body);
            //Assert.IsInstanceOf<BookTransferRS> (response, "response is BookTransferRS");
        }
        
        /// <summary>
        /// Test CancelBooking
        /// </summary>
        [Test]
        public void CancelBookingTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authtoken = null;
            //string bookingid = null;
            //var response = instance.CancelBooking(authtoken, bookingid);
            //Assert.IsInstanceOf<CancelBookingRS> (response, "response is CancelBookingRS");
        }
        
        /// <summary>
        /// Test ConfirmServices
        /// </summary>
        [Test]
        public void ConfirmServicesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authtoken = null;
            //ConfirmServicesRQ body = null;
            //var response = instance.ConfirmServices(authtoken, body);
            //Assert.IsInstanceOf<ConfirmServicesRS> (response, "response is ConfirmServicesRS");
        }
        
        /// <summary>
        /// Test GetActivityPriceDetails
        /// </summary>
        [Test]
        public void GetActivityPriceDetailsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authtoken = null;
            //string key = null;
            //var response = instance.GetActivityPriceDetails(authtoken, key);
            //Assert.IsInstanceOf<GetActivityPriceDetailsRS> (response, "response is GetActivityPriceDetailsRS");
        }
        
        /// <summary>
        /// Test GetAvailabeTransfers
        /// </summary>
        [Test]
        public void GetAvailabeTransfersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authtoken = null;
            //string from = null;
            //string to = null;
            //int? pax = null;
            //List<int?> ages = null;
            //int? bikes = null;
            //int? golfs = null;
            //int? bigs = null;
            //int? wheelchairs = null;
            //int? incomingdate = null;
            //int? outgoingdate = null;
            //var response = instance.GetAvailabeTransfers(authtoken, from, to, pax, ages, bikes, golfs, bigs, wheelchairs, incomingdate, outgoingdate);
            //Assert.IsInstanceOf<GetAvailableTransfersRS> (response, "response is GetAvailableTransfersRS");
        }
        
        /// <summary>
        /// Test GetAvailableActivities
        /// </summary>
        [Test]
        public void GetAvailableActivitiesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authtoken = null;
            //int? start = null;
            //int? end = null;
            //string resourceid = null;
            //int? pax = null;
            //List<int?> ages = null;
            //var response = instance.GetAvailableActivities(authtoken, start, end, resourceid, pax, ages);
            //Assert.IsInstanceOf<GetAvailableActivitiesRS> (response, "response is GetAvailableActivitiesRS");
        }
        
        /// <summary>
        /// Test GetAvailableHotels
        /// </summary>
        [Test]
        public void GetAvailableHotelsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authtoken = null;
            //List<string> resorts = null;
            //int? checkin = null;
            //int? checkout = null;
            //List<string> occupancies = null;
            //bool? includestaticinfo = null;
            //var response = instance.GetAvailableHotels(authtoken, resorts, checkin, checkout, occupancies, includestaticinfo);
            //Assert.IsInstanceOf<GetAvailableHotelsRS> (response, "response is GetAvailableHotelsRS");
        }
        
        /// <summary>
        /// Test GetBookings
        /// </summary>
        [Test]
        public void GetBookingsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authtoken = null;
            //int? confirmedfrom = null;
            //int? confirmedto = null;
            //int? startingfrom = null;
            //int? startingto = null;
            //var response = instance.GetBookings(authtoken, confirmedfrom, confirmedto, startingfrom, startingto);
            //Assert.IsInstanceOf<GetBookingsRS> (response, "response is GetBookingsRS");
        }
        
        /// <summary>
        /// Test GetDataSheet
        /// </summary>
        [Test]
        public void GetDataSheetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authtoken = null;
            //string resourceid = null;
            //var response = instance.GetDataSheet(authtoken, resourceid);
            //Assert.IsInstanceOf<GetDataSheetRS> (response, "response is GetDataSheetRS");
        }
        
        /// <summary>
        /// Test GetGrantedHotels
        /// </summary>
        [Test]
        public void GetGrantedHotelsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authtoken = null;
            //var response = instance.GetGrantedHotels(authtoken);
            //Assert.IsInstanceOf<GetGrantedHotelsRS> (response, "response is GetGrantedHotelsRS");
        }
        
        /// <summary>
        /// Test GetHotelPriceDetails
        /// </summary>
        [Test]
        public void GetHotelPriceDetailsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authtoken = null;
            //string key = null;
            //var response = instance.GetHotelPriceDetails(authtoken, key);
            //Assert.IsInstanceOf<GetHotelPriceDetailsRS> (response, "response is GetHotelPriceDetailsRS");
        }
        
        /// <summary>
        /// Test GetPortfolio
        /// </summary>
        [Test]
        public void GetPortfolioTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authtoken = null;
            //var response = instance.GetPortfolio(authtoken);
            //Assert.IsInstanceOf<GetPortfolioRS> (response, "response is GetPortfolioRS");
        }
        
        /// <summary>
        /// Test GetRoomingList
        /// </summary>
        [Test]
        public void GetRoomingListTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authtoken = null;
            //int? confirmedfrom = null;
            //int? confirmedto = null;
            //int? startingfrom = null;
            //int? startingto = null;
            //var response = instance.GetRoomingList(authtoken, confirmedfrom, confirmedto, startingfrom, startingto);
            //Assert.IsInstanceOf<GetRoomingListRS> (response, "response is GetRoomingListRS");
        }
        
        /// <summary>
        /// Test GetToken
        /// </summary>
        [Test]
        public void GetTokenTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authtoken = null;
            //string user = null;
            //var response = instance.GetToken(authtoken, user);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test GetTransferPriceDetails
        /// </summary>
        [Test]
        public void GetTransferPriceDetailsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authtoken = null;
            //string key = null;
            //var response = instance.GetTransferPriceDetails(authtoken, key);
            //Assert.IsInstanceOf<GetTransferPriceDetailsRS> (response, "response is GetTransferPriceDetailsRS");
        }
        
        /// <summary>
        /// Test Update
        /// </summary>
        [Test]
        public void UpdateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authtoken = null;
            //UpdateRQ body = null;
            //var response = instance.Update(authtoken, body);
            //Assert.IsInstanceOf<UpdateRS> (response, "response is UpdateRS");
        }
        
    }

}
